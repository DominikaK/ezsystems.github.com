{
    "project": {
        "name": "eZ Platform JavaScript REST client",
        "description": "Auto-generated API doc of eZ Platform JavaScript REST client",
        "version": "1.5.0",
        "url": "https://github.com/ezsystems/ez-js-rest-client",
        "logo": "http://ez.no/extension/ez_ezno/design/ezno_2014/images/ez-logo.png"
    },
    "files": {
        "src/authAgents/HttpBasicAuthAgent.js": {
            "name": "src/authAgents/HttpBasicAuthAgent.js",
            "modules": {},
            "classes": {
                "HttpBasicAuthAgent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/authAgents/SessionAuthAgent.js": {
            "name": "src/authAgents/SessionAuthAgent.js",
            "modules": {},
            "classes": {
                "SessionAuthAgent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/connections/MicrosoftXmlHttpRequestConnection.js": {
            "name": "src/connections/MicrosoftXmlHttpRequestConnection.js",
            "modules": {},
            "classes": {
                "MicrosoftXmlHttpRequestConnection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/connections/XmlHttpRequestConnection.js": {
            "name": "src/connections/XmlHttpRequestConnection.js",
            "modules": {},
            "classes": {
                "XmlHttpRequestConnection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/services/ContentService.js": {
            "name": "src/services/ContentService.js",
            "modules": {},
            "classes": {
                "ContentService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/services/ContentTypeService.js": {
            "name": "src/services/ContentTypeService.js",
            "modules": {},
            "classes": {
                "ContentTypeService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/services/DiscoveryService.js": {
            "name": "src/services/DiscoveryService.js",
            "modules": {},
            "classes": {
                "DiscoveryService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/services/PromiseService.js": {
            "name": "src/services/PromiseService.js",
            "modules": {},
            "classes": {
                "PromiseService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/services/UserService.js": {
            "name": "src/services/UserService.js",
            "modules": {},
            "classes": {
                "UserService": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/storages/InMemoryStorage.js": {
            "name": "src/storages/InMemoryStorage.js",
            "modules": {},
            "classes": {
                "InMemoryStorage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/storages/LocalStorage.js": {
            "name": "src/storages/LocalStorage.js",
            "modules": {},
            "classes": {
                "LocalStorage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/CAPIError.js": {
            "name": "src/structures/CAPIError.js",
            "modules": {},
            "classes": {
                "CAPIError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/ContentCreateStruct.js": {
            "name": "src/structures/ContentCreateStruct.js",
            "modules": {},
            "classes": {
                "ContentCreateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/ContentMetadataUpdateStruct.js": {
            "name": "src/structures/ContentMetadataUpdateStruct.js",
            "modules": {},
            "classes": {
                "ContentMetadataUpdateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/ContentTypeCreateStruct.js": {
            "name": "src/structures/ContentTypeCreateStruct.js",
            "modules": {},
            "classes": {
                "ContentTypeCreateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/ContentTypeGroupInputStruct.js": {
            "name": "src/structures/ContentTypeGroupInputStruct.js",
            "modules": {},
            "classes": {
                "ContentTypeGroupInputStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/ContentTypeUpdateStruct.js": {
            "name": "src/structures/ContentTypeUpdateStruct.js",
            "modules": {},
            "classes": {
                "ContentTypeUpdateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/ContentUpdateStruct.js": {
            "name": "src/structures/ContentUpdateStruct.js",
            "modules": {},
            "classes": {
                "ContentUpdateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/FieldDefinitionCreateStruct.js": {
            "name": "src/structures/FieldDefinitionCreateStruct.js",
            "modules": {},
            "classes": {
                "FieldDefinitionCreateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/FieldDefinitionUpdateStruct.js": {
            "name": "src/structures/FieldDefinitionUpdateStruct.js",
            "modules": {},
            "classes": {
                "FieldDefinitionUpdateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/LocationCreateStruct.js": {
            "name": "src/structures/LocationCreateStruct.js",
            "modules": {},
            "classes": {
                "LocationCreateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/LocationUpdateStruct.js": {
            "name": "src/structures/LocationUpdateStruct.js",
            "modules": {},
            "classes": {
                "LocationUpdateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/ObjectStateCreateStruct.js": {
            "name": "src/structures/ObjectStateCreateStruct.js",
            "modules": {},
            "classes": {
                "ObjectStateCreateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/ObjectStateGroupCreateStruct.js": {
            "name": "src/structures/ObjectStateGroupCreateStruct.js",
            "modules": {},
            "classes": {
                "ObjectStateGroupCreateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/ObjectStateGroupUpdateStruct.js": {
            "name": "src/structures/ObjectStateGroupUpdateStruct.js",
            "modules": {},
            "classes": {
                "ObjectStateGroupUpdateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/ObjectStateUpdateStruct.js": {
            "name": "src/structures/ObjectStateUpdateStruct.js",
            "modules": {},
            "classes": {
                "ObjectStateUpdateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/PolicyCreateStruct.js": {
            "name": "src/structures/PolicyCreateStruct.js",
            "modules": {},
            "classes": {
                "PolicyCreateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/PolicyUpdateStruct.js": {
            "name": "src/structures/PolicyUpdateStruct.js",
            "modules": {},
            "classes": {
                "PolicyUpdateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/RelationCreateStruct.js": {
            "name": "src/structures/RelationCreateStruct.js",
            "modules": {},
            "classes": {
                "RelationCreateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/Request.js": {
            "name": "src/structures/Request.js",
            "modules": {},
            "classes": {
                "Request": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/Response.js": {
            "name": "src/structures/Response.js",
            "modules": {},
            "classes": {
                "Response": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/RoleAssignInputStruct.js": {
            "name": "src/structures/RoleAssignInputStruct.js",
            "modules": {},
            "classes": {
                "RoleAssignInputStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/RoleInputStruct.js": {
            "name": "src/structures/RoleInputStruct.js",
            "modules": {},
            "classes": {
                "RoleInputStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/SectionInputStruct.js": {
            "name": "src/structures/SectionInputStruct.js",
            "modules": {},
            "classes": {
                "SectionInputStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/SessionCreateStruct.js": {
            "name": "src/structures/SessionCreateStruct.js",
            "modules": {},
            "classes": {
                "SessionCreateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/UrlAliasCreateStruct.js": {
            "name": "src/structures/UrlAliasCreateStruct.js",
            "modules": {},
            "classes": {
                "UrlAliasCreateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/UrlWildcardCreateStruct.js": {
            "name": "src/structures/UrlWildcardCreateStruct.js",
            "modules": {},
            "classes": {
                "UrlWildcardCreateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/UserCreateStruct.js": {
            "name": "src/structures/UserCreateStruct.js",
            "modules": {},
            "classes": {
                "UserCreateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/UserGroupCreateStruct.js": {
            "name": "src/structures/UserGroupCreateStruct.js",
            "modules": {},
            "classes": {
                "UserGroupCreateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/UserGroupUpdateStruct.js": {
            "name": "src/structures/UserGroupUpdateStruct.js",
            "modules": {},
            "classes": {
                "UserGroupUpdateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/UserUpdateStruct.js": {
            "name": "src/structures/UserUpdateStruct.js",
            "modules": {},
            "classes": {
                "UserUpdateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/structures/ViewCreateStruct.js": {
            "name": "src/structures/ViewCreateStruct.js",
            "modules": {},
            "classes": {
                "ViewCreateStruct": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/extend.js": {
            "name": "src/utils/extend.js",
            "modules": {},
            "classes": {
                "extend": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/uriparse.js": {
            "name": "src/utils/uriparse.js",
            "modules": {},
            "classes": {
                "parseUriTemplate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/CAPI.js": {
            "name": "src/CAPI.js",
            "modules": {},
            "classes": {
                "CAPI": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ConnectionFeatureFactory.js": {
            "name": "src/ConnectionFeatureFactory.js",
            "modules": {},
            "classes": {
                "ConnectionFeatureFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/ConnectionManager.js": {
            "name": "src/ConnectionManager.js",
            "modules": {},
            "classes": {
                "ConnectionManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/PromiseCAPI.js": {
            "name": "src/PromiseCAPI.js",
            "modules": {},
            "classes": {
                "PromiseCAPI": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "HttpBasicAuthAgent": {
            "name": "HttpBasicAuthAgent",
            "shortname": "HttpBasicAuthAgent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/authAgents/HttpBasicAuthAgent.js",
            "line": 5,
            "description": "Creates an instance of HttpBasicAuthAgent object\nAuth agent handles low level implementation of authorization workflow",
            "is_constructor": 1,
            "params": [
                {
                    "name": "credentials",
                    "description": "object literal containg credentials for the REST service access",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "login",
                            "description": "user login",
                            "type": "String"
                        },
                        {
                            "name": "password",
                            "description": "user password",
                            "type": "String"
                        }
                    ]
                }
            ]
        },
        "SessionAuthAgent": {
            "name": "SessionAuthAgent",
            "shortname": "SessionAuthAgent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 5,
            "description": "Creates an instance of SessionAuthAgent object\n\nAuth agent handles low level implementation of authorization workflow.\nBy providing a `login` and a `password` in the `authInfo` object, the\nauth agent will try to create a session:\n\n    var SessionAuthAgent({login: \"admin\", password: \"publish\"});\n\nThe session auth agent is also able to reuse an existing session, to do\nthat it needs to receive an object with the session info:\n\n    var new SessionAuthAgent({\n           name: \"eZSESSID\",\n           identifier: \"sessionidentifier\",\n           href: \"/api/ezp/v2/users/session/sessionidentifier\",\n           csrfToken: \"longCsrfToken\",\n       });",
            "is_constructor": 1,
            "params": [
                {
                    "name": "authInfo",
                    "description": "object literal containg the credentials (`login`\nand `password`) or the session info of an already existing one (`name`,\n`identifier`, `href` and `csrfToken`)",
                    "type": "Object",
                    "props": [
                        {
                            "name": "login",
                            "description": "user login",
                            "type": "String"
                        },
                        {
                            "name": "password",
                            "description": "user password",
                            "type": "String"
                        },
                        {
                            "name": "name",
                            "description": "name of the session",
                            "type": "String"
                        },
                        {
                            "name": "identifier",
                            "description": "identifier of the session",
                            "type": "String"
                        },
                        {
                            "name": "href",
                            "description": "refresh resource URI for the session",
                            "type": "String"
                        },
                        {
                            "name": "csrfToken",
                            "description": "CSRF Token",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "storage",
                    "description": "storage to be used. By default a LocalStorage will be utilized",
                    "type": "StorageAbstraction",
                    "optional": true,
                    "optdefault": "LocalStorage"
                }
            ]
        },
        "MicrosoftXmlHttpRequestConnection": {
            "name": "MicrosoftXmlHttpRequestConnection",
            "shortname": "MicrosoftXmlHttpRequestConnection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/connections/MicrosoftXmlHttpRequestConnection.js",
            "line": 6,
            "description": "Creates an instance of MicrosoftXmlHttpRequestConnection object\nThis connection class handles low-level implementation of XHR connection for Microsoft browsers",
            "is_constructor": 1,
            "deprecated": true,
            "deprecationMessage": "since 1.2"
        },
        "XmlHttpRequestConnection": {
            "name": "XmlHttpRequestConnection",
            "shortname": "XmlHttpRequestConnection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/connections/XmlHttpRequestConnection.js",
            "line": 5,
            "description": "Creates an instance of XmlHttpRequestConnection object\nThis connection class handles low-level implementation of XHR connection for generic (non-Microsoft) browsers",
            "is_constructor": 1
        },
        "ContentService": {
            "name": "ContentService",
            "shortname": "ContentService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/services/ContentService.js",
            "line": 14,
            "description": "Creates an instance of Content Service object. Use ContentService to retrieve information and execute operations related to Content.\n\n## Note on the *callbacks* usage\n\nThe **callback** argument of the service methods always take 2 arguments:\n\n   *     **error** either `false` or {{#crossLink \"CAPIError\"}}CAPIError{{/crossLink}} object when an error occurred\n\n   *     **response** the {{#crossLink \"Response\"}}Response{{/crossLink}} object\n\nExample:\n\n    contentService.loadRoot(function (error, response) {\n           if (error) {\n               console.log('An error occurred', error);\n           } else {\n               console.log('Success!', response);\n           }\n    });",
            "is_constructor": 1,
            "params": [
                {
                    "name": "connectionManager",
                    "description": "connection manager that will be used to send requests to REST service",
                    "type": "ConnectionManager"
                },
                {
                    "name": "discoveryService",
                    "description": "is handling REST paths auto-discovery",
                    "type": "DiscoveryService"
                },
                {
                    "name": "rootPath",
                    "description": "path to Root resource",
                    "type": "String"
                }
            ],
            "example": [
                "\n    var contentService = jsCAPI.getContentService();"
            ]
        },
        "ContentTypeService": {
            "name": "ContentTypeService",
            "shortname": "ContentTypeService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/services/ContentTypeService.js",
            "line": 8,
            "description": "Creates an instance of content type service object. Should be retrieved from CAPI instance (see example).\n\n## Note on the *callbacks* usage\n\nThe **callback** argument of the service methods always take 2 arguments:\n\n   *     **error** either `false` or {{#crossLink \"CAPIError\"}}CAPIError{{/crossLink}} object when an error occurred\n\n   *     **response** the {{#crossLink \"Response\"}}Response{{/crossLink}} object\n\nExample:\n\n    var contentTypeGroupCreateStruct = contentTypeService.newContentTypeGroupInputStruct(\n        \"new-group-id\"\n    );\n\n    contentTypeService..createContentTypeGroup(\n        \"/api/ezp/v2/content/typegroups\",\n        contentTypeGroupCreateStruct,\n        function (error, response) {\n           if (error) {\n               console.log('An error occurred', error);\n           } else {\n               console.log('Success!', response);\n           }\n    });",
            "is_constructor": 1,
            "params": [
                {
                    "name": "connectionManager",
                    "description": "connection manager that will be used to send requests to REST service",
                    "type": "ConnectionManager"
                },
                {
                    "name": "discoveryService",
                    "description": "discovery service is used for urls auto-discovery automation",
                    "type": "DiscoveryService"
                }
            ],
            "example": [
                "\n    var contentTypeService = jsCAPI.getContentTypeService();"
            ]
        },
        "DiscoveryService": {
            "name": "DiscoveryService",
            "shortname": "DiscoveryService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/services/DiscoveryService.js",
            "line": 5,
            "description": "Creates an instance of discovery service.  Discovery service is used\ninternally to discover resources URI and media type provided in the root\nresource.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "rootPath",
                    "description": "path to Root resource",
                    "type": "String"
                },
                {
                    "name": "connectionManager",
                    "description": "",
                    "type": "ConnectionManager"
                }
            ]
        },
        "PromiseService": {
            "name": "PromiseService",
            "shortname": "PromiseService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/services/PromiseService.js",
            "line": 5,
            "description": "Creates an instance of promise-based service object based on original service",
            "is_constructor": 1,
            "params": [
                {
                    "name": "originalService",
                    "description": "the service which should be converted into promise-based version (e.g. ContentService)",
                    "type": "Object"
                }
            ]
        },
        "UserService": {
            "name": "UserService",
            "shortname": "UserService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/services/UserService.js",
            "line": 12,
            "description": "Creates an instance of user service object. Should be retrieved from CAPI instance (see example).\n\n## Note on the *callbacks* usage\n\nThe **callback** argument of the service methods always take 2 arguments:\n\n   *     **error** either `false` or {{#crossLink \"CAPIError\"}}CAPIError{{/crossLink}} object when an error occurred\n\n   *     **response** the {{#crossLink \"Response\"}}Response{{/crossLink}} object\n\nExample:\n\n    userService.loadRootUserGroup(function (error, response) {\n           if (error) {\n               console.log('An error occurred', error);\n           } else {\n               console.log('Success!', response);\n           }\n    });",
            "is_constructor": 1,
            "params": [
                {
                    "name": "connectionManager",
                    "description": "connection manager that will be used to send requests to REST service",
                    "type": "ConnectionManager"
                },
                {
                    "name": "discoveryService",
                    "description": "discovery service is used for urls auto-discovery automation",
                    "type": "DiscoveryService"
                }
            ],
            "example": [
                "\n    var userService = jsCAPI.getUserService();"
            ]
        },
        "InMemoryStorage": {
            "name": "InMemoryStorage",
            "shortname": "InMemoryStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/storages/InMemoryStorage.js",
            "line": 3,
            "description": "Implementation of the storage abstraction utilizing simple in-memory variables\n\nThis storage is always usable. Its main purpose is the usage in conjunction with\nSingle-Page-Applications, which do not need fancy session or domain based storages,\nwhich are available for more than one request.",
            "extends": "{StorageAbstraction}",
            "is_constructor": 1
        },
        "LocalStorage": {
            "name": "LocalStorage",
            "shortname": "LocalStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/storages/LocalStorage.js",
            "line": 3,
            "description": "Implementation of the storage abstraction utilizing a window.localStorage\n\nIf the localStorage is not available an error is thrown during construction\n\nUsability of this storage can be checked using the static isCompatible method.\n\nIn addition of providing compatibility checking stored data will automatically be converted between\nobject and string representation to allow the storage of arbitrary datastructures",
            "extends": "{StorageAbstraction}",
            "is_constructor": 1
        },
        "CAPIError": {
            "name": "CAPIError",
            "shortname": "CAPIError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/CAPIError.js",
            "line": 5,
            "description": "Class describing any error which could be thrown during CAPI workflow",
            "is_constructor": 1,
            "params": [
                {
                    "name": "message",
                    "description": "error message",
                    "type": "String"
                },
                {
                    "name": "details",
                    "description": "object literal containing any additional error properties",
                    "type": "Object"
                }
            ]
        },
        "ContentCreateStruct": {
            "name": "ContentCreateStruct",
            "shortname": "ContentCreateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/ContentCreateStruct.js",
            "line": 5,
            "description": "Returns a structure used to create a new Content object. See\n{{#crossLink \"ContentService/createContent\"}}ContentService.createContent{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "contentTypeId",
                    "description": "Content Type id (e.g. \"/api/ezp/v2/content/types/16\")",
                    "type": "String"
                },
                {
                    "name": "locationCreateStruct",
                    "description": "create structure for a Location object, where the new Content object will be situated",
                    "type": "LocationCreateStruct"
                },
                {
                    "name": "languageCode",
                    "description": "The language code (e.g. \"eng-GB\")",
                    "type": "String"
                }
            ]
        },
        "ContentMetadataUpdateStruct": {
            "name": "ContentMetadataUpdateStruct",
            "shortname": "ContentMetadataUpdateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/ContentMetadataUpdateStruct.js",
            "line": 5,
            "description": "The Content Update structure that can be used with {{#crossLink\n\"ContentService/updateContentMetadata\"}}ContentService.updateContentMetadata{{/crossLink}}",
            "is_constructor": 1
        },
        "ContentTypeCreateStruct": {
            "name": "ContentTypeCreateStruct",
            "shortname": "ContentTypeCreateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/ContentTypeCreateStruct.js",
            "line": 5,
            "description": "Returns a structure used to create a new Content Type object. See\n{{#crossLink \"ContentTypeService/createContentType\"}}ContentTypeService.createContentType{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "identifier",
                    "description": "Unique identifier for the target Content Type (e.g. \"my_new_content_type\")",
                    "type": "String"
                },
                {
                    "name": "languageCode",
                    "description": "The language code (e.g. \"eng-GB\")",
                    "type": "String"
                },
                {
                    "name": "names",
                    "description": "Multi language value (see example in\n{{#crossLink \"ContentTypeService/newContentTypeCreateStruct\"}}ContentTypeService:newContentTypeCreateStruct{{/crossLink}})",
                    "type": "Array"
                }
            ]
        },
        "ContentTypeGroupInputStruct": {
            "name": "ContentTypeGroupInputStruct",
            "shortname": "ContentTypeGroupInputStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/ContentTypeGroupInputStruct.js",
            "line": 5,
            "description": "Returns a structure used to create and update a Content Type group. See\n{{#crossLink \"ContentTypeService/createContentTypeGroup\"}}ContentTypeService.createContentTypeGroup{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "identifier",
                    "description": "Unique identifier for the target Content Type group (e.g. \"my_new_content_type_group\")",
                    "type": "String"
                }
            ]
        },
        "ContentTypeUpdateStruct": {
            "name": "ContentTypeUpdateStruct",
            "shortname": "ContentTypeUpdateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/ContentTypeUpdateStruct.js",
            "line": 5,
            "description": "Returns a structure used to update a Content Type object. See for ex.\n{{#crossLink \"ContentTypeService/createContentTypeDraft\"}}ContentTypeService.createContentTypeDraft{{/crossLink}}",
            "is_constructor": 1
        },
        "ContentUpdateStruct": {
            "name": "ContentUpdateStruct",
            "shortname": "ContentUpdateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/ContentUpdateStruct.js",
            "line": 5,
            "description": "Returns a structure used to update a Content object. See\n{{#crossLink \"ContentService/updateContent\"}}ContentService.updateContent{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "languageCode",
                    "description": "The language code (eng-GB, fre-FR, ...)",
                    "type": "String"
                }
            ]
        },
        "FieldDefinitionCreateStruct": {
            "name": "FieldDefinitionCreateStruct",
            "shortname": "FieldDefinitionCreateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/FieldDefinitionCreateStruct.js",
            "line": 5,
            "description": "Returns a structure used to create a new Field Definition. See\n{{#crossLink \"ContentTypeService/addFieldDefinition\"}}ContentTypeService.addFieldDefinition{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "identifier",
                    "description": "unique field definiton identifer (e.g. \"my-field\")",
                    "type": "String"
                },
                {
                    "name": "fieldType",
                    "description": "identifier of existing field type (e.g. \"ezstring\", \"ezdate\")",
                    "type": "String"
                },
                {
                    "name": "fieldGroup",
                    "description": "identifier of existing field group (e.g. \"content\", \"meta\")",
                    "type": "String"
                },
                {
                    "name": "names",
                    "description": "Multi language value (see example in\n{{#crossLink \"ContentTypeService/newFieldDefinitionCreateStruct\"}}ContentTypeService.newFieldDefintionCreateStruct{{/crossLink}})",
                    "type": "Array"
                }
            ]
        },
        "FieldDefinitionUpdateStruct": {
            "name": "FieldDefinitionUpdateStruct",
            "shortname": "FieldDefinitionUpdateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/FieldDefinitionUpdateStruct.js",
            "line": 5,
            "description": "Returns a structure used to update a Field Definition. See\n{{#crossLink \"ContentTypeService/updateFieldDefinition\"}}ContentTypeService.updateFieldDefinition{{/crossLink}}",
            "is_constructor": 1
        },
        "LocationCreateStruct": {
            "name": "LocationCreateStruct",
            "shortname": "LocationCreateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/LocationCreateStruct.js",
            "line": 5,
            "description": "Returns a structure used to create a new Location. See\n{{#crossLink \"ContentService/createLocation\"}}ContentService.createLocation{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "parentLocationId",
                    "description": "reference to the parent location of the new Location.",
                    "type": "String"
                }
            ]
        },
        "LocationUpdateStruct": {
            "name": "LocationUpdateStruct",
            "shortname": "LocationUpdateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/LocationUpdateStruct.js",
            "line": 5,
            "description": "Returns a structure used to update a Location. See\n{{#crossLink \"ContentService/updateLocation\"}}ContentService.updateLocation{{/crossLink}}",
            "is_constructor": 1
        },
        "ObjectStateCreateStruct": {
            "name": "ObjectStateCreateStruct",
            "shortname": "ObjectStateCreateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/ObjectStateCreateStruct.js",
            "line": 5,
            "description": "Returns a structure used to create a new Object State. See\n{{#crossLink \"ContentService/createObjectState\"}}ContentService.createObjectState{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "identifier",
                    "description": "unique ObjectState identifier (e.g. \"some-new-state\")",
                    "type": "String"
                },
                {
                    "name": "languageCode",
                    "description": "The language code (eng-GB, fre-FR, ...)",
                    "type": "String"
                },
                {
                    "name": "priority",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "names",
                    "description": "Multi language value (see example)",
                    "type": "Array"
                },
                {
                    "name": "descriptions",
                    "description": "Multi language value (see example)",
                    "type": "Array"
                }
            ],
            "example": [
                "\n     var objectStateCreateStruct = contentService.newObjectStateCreateStruct(\n         \"some-id\",\n         \"eng-US\",\n         0,\n         [\n             {\n                 \"_languageCode\":\"eng-US\",\n                 \"#text\":\"Some Name\"\n             }\n         ],\n         [\n             {\n                 \"_languageCode\":\"eng-US\",\n                 \"#text\":\"Some Description\"\n             }\n         ]\n     );"
            ]
        },
        "ObjectStateGroupCreateStruct": {
            "name": "ObjectStateGroupCreateStruct",
            "shortname": "ObjectStateGroupCreateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/ObjectStateGroupCreateStruct.js",
            "line": 5,
            "description": "Returns a structure used to create a new Object State group. See\n{{#crossLink \"ContentService/createObjectStateGroup\"}}ContentService.createObjectStateGroup{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "identifier",
                    "description": "unique ObjectStateGroup identifier",
                    "type": "String"
                },
                {
                    "name": "languageCode",
                    "description": "The language code (eng-GB, fre-FR, ...)",
                    "type": "String"
                },
                {
                    "name": "names",
                    "description": "Multi language value (see the example)",
                    "type": "Array"
                }
            ],
            "example": [
                "\n     var objectStateGroupCreateStruct = contentService.newObjectStateGroupCreateStruct(\n         \"some-id\",\n         \"eng-US\",\n         [\n             {\n                 \"_languageCode\":\"eng-US\",\n                 \"#text\":\"Some Name\"\n             }\n         ]\n     );"
            ]
        },
        "ObjectStateGroupUpdateStruct": {
            "name": "ObjectStateGroupUpdateStruct",
            "shortname": "ObjectStateGroupUpdateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/ObjectStateGroupUpdateStruct.js",
            "line": 5,
            "description": "Returns a structure used to update an Object State group. See\n{{#crossLink \"ContentService/updateObjectStateGroup\"}}ContentService.updateObjectStateGroup{{/crossLink}}",
            "is_constructor": 1
        },
        "ObjectStateUpdateStruct": {
            "name": "ObjectStateUpdateStruct",
            "shortname": "ObjectStateUpdateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/ObjectStateUpdateStruct.js",
            "line": 5,
            "description": "Returns a structure used to update an Object State. See\n{{#crossLink \"ContentService/updateObjectState\"}}ContentService.updateObjectState{{/crossLink}}",
            "is_constructor": 1
        },
        "PolicyCreateStruct": {
            "name": "PolicyCreateStruct",
            "shortname": "PolicyCreateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/PolicyCreateStruct.js",
            "line": 5,
            "description": "Returns a structure used to create a new Policy. See\n{{#crossLink \"UserService/addPolicy\"}}UserService.addPolicy{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "module",
                    "description": "name of the module for which new policy should be active",
                    "type": "String"
                },
                {
                    "name": "theFunction",
                    "description": "name of the function for which the new policy should be active",
                    "type": "String"
                },
                {
                    "name": "limitations",
                    "description": "object describing limitations for new policy",
                    "type": "Object"
                }
            ]
        },
        "PolicyUpdateStruct": {
            "name": "PolicyUpdateStruct",
            "shortname": "PolicyUpdateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/PolicyUpdateStruct.js",
            "line": 5,
            "description": "Returns a structure used to update a Policy. See\n{{#crossLink \"UserService/updatePolicy\"}}UserService.updatePolicy{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "limitations",
                    "description": "object describing limitations change for the policy",
                    "type": "Object"
                }
            ]
        },
        "RelationCreateStruct": {
            "name": "RelationCreateStruct",
            "shortname": "RelationCreateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/RelationCreateStruct.js",
            "line": 5,
            "description": "Returns a structure used to create a new Content object. See\n{{#crossLink \"ContentService/addRelation\"}}ContentService.addRelation{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "destination",
                    "description": "reference to the resource we want to make related",
                    "type": "String"
                }
            ]
        },
        "Request": {
            "name": "Request",
            "shortname": "Request",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/Request.js",
            "line": 5,
            "description": "Request object used for storing all the data, which should be sent to the REST server.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "valuesContainer",
                    "description": "object literal containing any request properties",
                    "type": "Object"
                }
            ]
        },
        "Response": {
            "name": "Response",
            "shortname": "Response",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/Response.js",
            "line": 5,
            "is_constructor": 1,
            "params": [
                {
                    "name": "valuesContainer",
                    "description": ""
                }
            ]
        },
        "RoleAssignInputStruct": {
            "name": "RoleAssignInputStruct",
            "shortname": "RoleAssignInputStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/RoleAssignInputStruct.js",
            "line": 5,
            "description": "Returns a structure used to create and update a Role Assign object. See for ex.\n{{#crossLink \"UserService/assignRoleToUser\"}}UserService.assignRoleToUser{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "role",
                    "description": "object representing the target role",
                    "type": "Object"
                },
                {
                    "name": "limitation",
                    "description": "object representing limitations for assignment (see example in\n{{#crossLink \"UserService/newRoleAssignInputStruct\"}}UserService.newRoleAssignInputStruct{{/crossLink}})",
                    "type": "Object"
                }
            ]
        },
        "RoleInputStruct": {
            "name": "RoleInputStruct",
            "shortname": "RoleInputStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/RoleInputStruct.js",
            "line": 5,
            "description": "Returns a structure used to create and update a Role. See\n{{#crossLink \"UserService/createRole\"}}UserService.createRole{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "identifier",
                    "description": "unique Role identifier",
                    "type": "String"
                }
            ]
        },
        "SectionInputStruct": {
            "name": "SectionInputStruct",
            "shortname": "SectionInputStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/SectionInputStruct.js",
            "line": 5,
            "description": "Returns a structure used to create and update a Section. See for ex.\n{{#crossLink \"ContentService/createSection\"}}ContentService.createSection{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "identifier",
                    "description": "unique section identifier",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "section name",
                    "type": "String"
                }
            ]
        },
        "SessionCreateStruct": {
            "name": "SessionCreateStruct",
            "shortname": "SessionCreateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/SessionCreateStruct.js",
            "line": 5,
            "description": "Returns a structure used to create a new Session. See\n{{#crossLink \"UserService/createSession\"}}UserService.createSession{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "login",
                    "description": "login for a user, which wants to start a session",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "password for a user, which wants to start a session",
                    "type": "String"
                }
            ]
        },
        "UrlAliasCreateStruct": {
            "name": "UrlAliasCreateStruct",
            "shortname": "UrlAliasCreateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/UrlAliasCreateStruct.js",
            "line": 5,
            "description": "Returns a structure used to create a new UrlAlias object. See\n{{#crossLink \"ContentService/createUrlAlias\"}}ContentService.createUrlAlias{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "languageCode",
                    "description": "The language code (eng-GB, fre-FR, ...)",
                    "type": "String"
                },
                {
                    "name": "resource",
                    "description": "eZ Publish resource you want to create alias for",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "the new alias itself",
                    "type": "String"
                }
            ],
            "example": [
                "\n    var urlAliasCreateStruct = contentService.newUrlAliasCreateStruct(\n        \"eng-US\",\n        \"content/search\",\n        \"findme-alias\"\n    );"
            ]
        },
        "UrlWildcardCreateStruct": {
            "name": "UrlWildcardCreateStruct",
            "shortname": "UrlWildcardCreateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/UrlWildcardCreateStruct.js",
            "line": 5,
            "description": "Returns a structure used to create a new Url Wildcard object. See\n{{#crossLink \"ContentService/createUrlWildcard\"}}ContentService.createUrlWildcard{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "sourceUrl",
                    "description": "new url wildcard",
                    "type": "String"
                },
                {
                    "name": "destinationUrl",
                    "description": "existing resource where wildcard should point",
                    "type": "String"
                },
                {
                    "name": "forward",
                    "description": "weather or not the wildcard should redirect to the resource",
                    "type": "Boolean"
                }
            ]
        },
        "UserCreateStruct": {
            "name": "UserCreateStruct",
            "shortname": "UserCreateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/UserCreateStruct.js",
            "line": 5,
            "description": "Returns a structure used to create a new User. See\n{{#crossLink \"UserService/createUser\"}}UserService.createUser{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "languageCode",
                    "description": "The language code (eng-GB, fre-FR, ...)",
                    "type": "String"
                },
                {
                    "name": "login",
                    "description": "login for a new user",
                    "type": "String"
                },
                {
                    "name": "email",
                    "description": "email for a new user",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "password for a new user",
                    "type": "String"
                },
                {
                    "name": "fields",
                    "description": "fields array (see example in\n{{#crossLink \"UserService/newUserGroupCreateStruct\"}}UserService.newUserGroupCreateStruct{{/crossLink}})",
                    "type": "Array"
                }
            ]
        },
        "UserGroupCreateStruct": {
            "name": "UserGroupCreateStruct",
            "shortname": "UserGroupCreateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/UserGroupCreateStruct.js",
            "line": 5,
            "description": "Returns a structure used to create a new User group. See\n{{#crossLink \"UserService/createUserGroup\"}}UserService.createUserGroup{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "languageCode",
                    "description": "The language code (eng-GB, fre-FR, ...)",
                    "type": "String"
                },
                {
                    "name": "fields",
                    "description": "fields array (see example in\n{{#crossLink \"UserService/newUserGroupCreateStruct\"}}UserService.newUserGroupCreateStruct{{/crossLink}})",
                    "type": "Array"
                }
            ]
        },
        "UserGroupUpdateStruct": {
            "name": "UserGroupUpdateStruct",
            "shortname": "UserGroupUpdateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/UserGroupUpdateStruct.js",
            "line": 5,
            "description": "Returns a structure used to update a User group. See\n{{#crossLink \"UserService/updateUserGroup\"}}UserService.updateUserGroup{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "languageCode",
                    "description": "The language code (eng-GB, fre-FR, ...)",
                    "type": "String"
                },
                {
                    "name": "fields",
                    "description": "fields array (see example in\n{{#crossLink \"UserService/newUserGroupCreateStruct\"}}UserService.newUserGroupCreateStruct{{/crossLink}})",
                    "type": "Array"
                }
            ]
        },
        "UserUpdateStruct": {
            "name": "UserUpdateStruct",
            "shortname": "UserUpdateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/UserUpdateStruct.js",
            "line": 5,
            "description": "Returns a structure used to update a User. See\n{{#crossLink \"UserService/updateUser\"}}UserService.updateUser{{/crossLink}}",
            "is_constructor": 1
        },
        "ViewCreateStruct": {
            "name": "ViewCreateStruct",
            "shortname": "ViewCreateStruct",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/structures/ViewCreateStruct.js",
            "line": 5,
            "description": "Returns a structure used to create a new REST View. See\n{{#crossLink \"ContentService/createView\"}}ContentService.createView{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "identifier",
                    "description": "unique view identifier",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "the view type to create, the REST API currently\nsupports only \"ContentQuery\" or \"LocationQuery\".",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"ContentQuery\""
                }
            ]
        },
        "extend": {
            "name": "extend",
            "shortname": "extend",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/utils/extend.js",
            "line": 4,
            "description": "Provides only the `extend` function.",
            "static": 1
        },
        "parseUriTemplate": {
            "name": "parseUriTemplate",
            "shortname": "parseUriTemplate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/utils/uriparse.js",
            "line": 4,
            "description": "Provides the parseUriTemplate function",
            "static": 1
        },
        "CAPI": {
            "name": "CAPI",
            "shortname": "CAPI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/CAPI.js",
            "line": 12,
            "description": "Creates an instance of CAPI - main object which handles the API initialization and gives ability to retrieve various services.\nCould be created only in one instance. Handles connections, authorization and REST paths discovery automatically.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "endPointUrl",
                    "description": "url pointing to REST root",
                    "type": "String"
                },
                {
                    "name": "authenticationAgent",
                    "description": "Instance of one of the AuthAgents (e.g. SessionAuthAgent, HttpBasicAuthAgent)",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Object containing different options for the CAPI",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "rootPath",
                            "description": "the API root path",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'/api/ezp/v2/'"
                        },
                        {
                            "name": "logRequests",
                            "description": "whether to log requests",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "siteAccess",
                            "description": "siteaccess in which requests should be executed",
                            "type": "String|null",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                }
            ],
            "example": [
                "\n    var   authAgent = new SessionAuthAgent({\n              login: \"admin\",\n              password: \"admin\"\n          }),\n          jsCAPI = new CAPI(\n              'http://ez.git.local', authAgent, {\n              logRequests: true, // Whether we should log each request to the js console or not\n              rootPath: '/api/ezp/v2/', // Path to the REST root\n              connectionStack: [ // Array of connections, should be filled-in in preferred order\n                   {connection: XmlHttpRequestConnection},\n                   {connection: MicrosoftXmlHttpRequestConnection}\n              ]\n          });"
            ]
        },
        "ConnectionFeatureFactory": {
            "name": "ConnectionFeatureFactory",
            "shortname": "ConnectionFeatureFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/ConnectionFeatureFactory.js",
            "line": 5,
            "description": "Creates an instance of connection feature factory. This factory is choosing compatible connection from list of available connections.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "connectionList",
                    "description": "Array of connections, should be filled-in in preferred order",
                    "type": "Array"
                }
            ]
        },
        "ConnectionManager": {
            "name": "ConnectionManager",
            "shortname": "ConnectionManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/ConnectionManager.js",
            "line": 6,
            "description": "Creates an instance of connection manager object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "endPointUrl",
                    "description": "url to REST root",
                    "type": "String"
                },
                {
                    "name": "authenticationAgent",
                    "description": "Instance of one of the AuthAgents (e.g. SessionAuthAgent, HttpBasicAuthAgent)",
                    "type": "Object"
                },
                {
                    "name": "connectionFactory",
                    "description": "the factory which is choosing compatible connection from connections list",
                    "type": "ConnectionFeatureFactory"
                },
                {
                    "name": "siteAccess",
                    "description": "SiteAccess to use for requests",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "PromiseCAPI": {
            "name": "PromiseCAPI",
            "shortname": "PromiseCAPI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/PromiseCAPI.js",
            "line": 5,
            "description": "Creates an instance of PromiseCAPI object based on existing CAPI object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "originalCapi",
                    "description": "main REST client object",
                    "type": "CAPI"
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/authAgents/HttpBasicAuthAgent.js",
            "line": 16,
            "description": "The login",
            "itemtype": "property",
            "name": "_login",
            "type": "{String}",
            "default": "\"\"",
            "access": "protected",
            "tagname": "",
            "class": "HttpBasicAuthAgent"
        },
        {
            "file": "src/authAgents/HttpBasicAuthAgent.js",
            "line": 26,
            "description": "The password",
            "itemtype": "property",
            "name": "_password",
            "type": "{String}",
            "default": "\"\"",
            "access": "protected",
            "tagname": "",
            "class": "HttpBasicAuthAgent"
        },
        {
            "file": "src/authAgents/HttpBasicAuthAgent.js",
            "line": 41,
            "description": "Called every time a new request cycle is started,\nto ensure those requests are correctly authenticated.\n\nA cycle may contain one or more queued up requests",
            "itemtype": "method",
            "name": "ensureAuthentication",
            "params": [
                {
                    "name": "done",
                    "description": "Callback function, which is to be called by the implementation\nto signal the authentication has been completed.",
                    "type": "Function"
                }
            ],
            "class": "HttpBasicAuthAgent"
        },
        {
            "file": "src/authAgents/HttpBasicAuthAgent.js",
            "line": 56,
            "description": "Hook to allow the modification of any request, for authentication purposes, before\nsending it out to the backend",
            "itemtype": "method",
            "name": "authenticateRequest",
            "params": [
                {
                    "name": "request",
                    "description": "",
                    "type": "Request"
                },
                {
                    "name": "done",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "HttpBasicAuthAgent"
        },
        {
            "file": "src/authAgents/HttpBasicAuthAgent.js",
            "line": 72,
            "description": "Log out\nNo actual logic for HTTP Basic Auth",
            "itemtype": "method",
            "name": "logOut",
            "params": [
                {
                    "name": "done",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "HttpBasicAuthAgent"
        },
        {
            "file": "src/authAgents/HttpBasicAuthAgent.js",
            "line": 83,
            "description": "Checks whether the user is logged in. For HttpBasicAuthAgent, it actually\ntries to load the root resource with the provided credentials.",
            "itemtype": "method",
            "name": "isLoggedIn",
            "params": [
                {
                    "name": "done",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "HttpBasicAuthAgent"
        },
        {
            "file": "src/authAgents/HttpBasicAuthAgent.js",
            "line": 98,
            "description": "Logs in the user by trying to load the root resource, it is the same as\n{{#crossLink\n\"HttpBasicAuthAgent/isLoggedIn:method\"}}HttpBasicAuthAgent.isLoggedIn{{/crossLink}}",
            "itemtype": "method",
            "name": "logIn",
            "params": [
                {
                    "name": "done",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "HttpBasicAuthAgent"
        },
        {
            "file": "src/authAgents/HttpBasicAuthAgent.js",
            "line": 110,
            "description": "Set the instance of the CAPI to be used by the agent",
            "itemtype": "method",
            "name": "setCAPI",
            "params": [
                {
                    "name": "CAPI",
                    "description": "current instance of the CAPI object",
                    "type": "CAPI"
                }
            ],
            "class": "HttpBasicAuthAgent"
        },
        {
            "file": "src/authAgents/HttpBasicAuthAgent.js",
            "line": 120,
            "description": "Set the credentials",
            "itemtype": "method",
            "name": "setCredentials",
            "params": [
                {
                    "name": "credentials",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "login",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "password",
                            "description": "",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "HttpBasicAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 38,
            "description": "The CAPI instance. It is set by the call to setCAPI() done while\ninstantiating the CAPI.",
            "itemtype": "property",
            "name": "_CAPI",
            "type": "CAPI",
            "access": "protected",
            "tagname": "",
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 48,
            "description": "The login",
            "itemtype": "property",
            "name": "_login",
            "type": "{String}",
            "default": "\"\"",
            "access": "protected",
            "tagname": "",
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 58,
            "description": "The password",
            "itemtype": "property",
            "name": "_password",
            "type": "{String}",
            "default": "\"\"",
            "access": "protected",
            "tagname": "",
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 68,
            "description": "The storage to use to store the session info.",
            "itemtype": "property",
            "name": "_storage",
            "type": "{StorageAbstraction}",
            "default": "LocalStorage",
            "access": "protected",
            "tagname": "",
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 90,
            "description": "Constant to be used as storage key for the sessionName",
            "static": 1,
            "itemtype": "property",
            "name": "",
            "final": "",
            "type": "{string}",
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 99,
            "description": "Constant to be used as storage key for the sessionId",
            "static": 1,
            "itemtype": "property",
            "name": "",
            "final": "",
            "type": "{string}",
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 108,
            "description": "Constant to be used as storage key for the sessionHref",
            "static": 1,
            "itemtype": "property",
            "name": "",
            "final": "",
            "type": "{string}",
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 117,
            "description": "Constant to be used as storage key for the csrfToken",
            "static": 1,
            "itemtype": "property",
            "name": "",
            "final": "",
            "type": "{string}",
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 126,
            "description": "Checks that the current user is still logged in. To be considered as\nlogged in, the storage should have a session id and the refresh calls\nshould be successful.\nIf the storage does not contain any session info, the callback is called\nwith `true` as its first argument, otherwise, the callback is called\nwith the `error` and `result` from {{#crossLink\n\"UserService/refreshSession:method\"}}UserService.refreshSession{{/crossLink}}.",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "isLoggedIn",
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 155,
            "description": "Called every time a new request cycle is started,\nto ensure those requests are correctly authenticated.\n\nA cycle may contain one or more queued up requests",
            "itemtype": "method",
            "name": "ensureAuthentication",
            "params": [
                {
                    "name": "done",
                    "description": "Callback function, which is to be called by the implementation to signal the authentication has been completed.",
                    "type": "Function"
                }
            ],
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 200,
            "description": "Tries to log in in the REST API. If the storage already contains a\nsession id, first it tries to log out before doing the log in.",
            "itemtype": "method",
            "name": "logIn",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 219,
            "description": "Hook to allow the modification of any request, for authentication purposes, before\nsending it out to the backend",
            "itemtype": "method",
            "name": "authenticateRequest",
            "params": [
                {
                    "name": "request",
                    "description": "",
                    "type": "Request"
                },
                {
                    "name": "done",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 237,
            "description": "Log out. If the client did not logged in yet, the callback is called with\n`false` and `true` as arguments, otherwise the callback is called with the\n`error` and the `result` from {{#crossLink\n\"UserService/deleteSession:method\"}}userService.deleteSession{{/crossLink}}.",
            "itemtype": "method",
            "name": "logOut",
            "params": [
                {
                    "name": "done",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 267,
            "description": "Set the instance of the CAPI to be used by the agent",
            "itemtype": "method",
            "name": "setCAPI",
            "params": [
                {
                    "name": "CAPI",
                    "description": "current instance of the CAPI object",
                    "type": "CAPI"
                }
            ],
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 277,
            "description": "Set the credentials",
            "itemtype": "method",
            "name": "setCredentials",
            "params": [
                {
                    "name": "credentials",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "login",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "password",
                            "description": "",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 290,
            "description": "Resets the storage associated with this auth agent",
            "itemtype": "method",
            "name": "_resetStorage",
            "access": "protected",
            "tagname": "",
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/authAgents/SessionAuthAgent.js",
            "line": 303,
            "description": "Stores the session information in the storage",
            "itemtype": "method",
            "name": "_storeSessionInfo",
            "params": [
                {
                    "name": "session",
                    "description": "an object describing the session",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "the name of the session",
                            "type": "String"
                        },
                        {
                            "name": "identifier",
                            "description": "the identifier of the session",
                            "type": "String"
                        },
                        {
                            "name": "href",
                            "description": "the resource uri to refresh the session",
                            "type": "String"
                        },
                        {
                            "name": "csrfToken",
                            "description": "the CSRF Token associated with the\nsession",
                            "type": "String"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "SessionAuthAgent"
        },
        {
            "file": "src/connections/MicrosoftXmlHttpRequestConnection.js",
            "line": 19,
            "description": "Basic request implemented via XHR technique",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "request",
                    "description": "structure containing all needed params and data",
                    "type": "Request"
                },
                {
                    "name": "callback",
                    "description": "function, which will be executed on request success",
                    "type": "Function"
                }
            ],
            "class": "MicrosoftXmlHttpRequestConnection"
        },
        {
            "file": "src/connections/MicrosoftXmlHttpRequestConnection.js",
            "line": 70,
            "description": "Connection checks itself for compatibility with running environment",
            "itemtype": "method",
            "name": "isCompatible",
            "static": 1,
            "return": {
                "description": "whether the connection is compatible with current environment",
                "type": "Boolean"
            },
            "class": "MicrosoftXmlHttpRequestConnection"
        },
        {
            "file": "src/connections/XmlHttpRequestConnection.js",
            "line": 25,
            "description": "Basic request implemented via XHR technique",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "request",
                    "description": "structure containing all needed params and data",
                    "type": "Request"
                },
                {
                    "name": "requestEventHandlers",
                    "description": "a set of callbacks to apply on a specific XHR event like onload, onerror, onprogress, etc.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function, which will be executed on request success",
                    "type": "Function"
                }
            ],
            "class": "XmlHttpRequestConnection"
        },
        {
            "file": "src/connections/XmlHttpRequestConnection.js",
            "line": 113,
            "description": "Connection checks itself for compatibility with running environment",
            "itemtype": "method",
            "name": "isCompatible",
            "static": 1,
            "return": {
                "description": "whether the connection is compatible with current environment",
                "type": "Boolean"
            },
            "class": "XmlHttpRequestConnection"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 49,
            "description": "List the root resources of the eZ Publish installation. Root resources contain many paths and references to other parts of the REST interface.\nThis call is used by DiscoveryService automatically, whenever needed.",
            "itemtype": "method",
            "name": "loadRoot",
            "params": [
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 71,
            "description": "Returns update structure for Content object",
            "itemtype": "method",
            "name": "newContentUpdateStruct",
            "params": [
                {
                    "name": "language",
                    "description": "The language code (eng-GB, fre-FR, ...)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "ContentUpdateStruct"
            },
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 83,
            "description": "Returns update structure for Content object metadata",
            "itemtype": "method",
            "name": "newContentMetadataUpdateStruct",
            "return": {
                "description": "ContentMetadataUpdateStruct"
            },
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 93,
            "description": "Returns create structure for Content object",
            "itemtype": "method",
            "name": "newContentCreateStruct",
            "params": [
                {
                    "name": "contentTypeId",
                    "description": "Content Type for new Content object (e.g.: /api/v2/ezp/content/type/1)",
                    "type": "String"
                },
                {
                    "name": "locationCreateStruct",
                    "description": "create structure for a Location object, where the new Content object will be situated",
                    "type": "LocationCreateStruct"
                },
                {
                    "name": "language",
                    "description": "The language code (eng-GB, fre-FR, ...)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "ContentCreateStruct"
            },
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 106,
            "description": "Returns input structure for Section object. Input structure is needed while creating and updating the object.",
            "itemtype": "method",
            "name": "newSectionInputStruct",
            "params": [
                {
                    "name": "identifier",
                    "description": "unique section identifier (e.g. \"media\")",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "section name (e.g. \"Media\")",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "SectionInputStruct"
            },
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 118,
            "description": "Returns create structure for Location object",
            "itemtype": "method",
            "name": "newLocationCreateStruct",
            "params": [
                {
                    "name": "parentLocationId",
                    "description": "Reference to the parent location of the new Location. (e.g. \"/api/ezp/v2/content/locations/1/2/118\")",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "LocationCreateStruct"
            },
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 129,
            "description": "Returns update structure for Location object",
            "itemtype": "method",
            "name": "newLocationUpdateStruct",
            "return": {
                "description": "",
                "type": "LocationUpdateStruct"
            },
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 139,
            "description": "Returns create structure for View object",
            "itemtype": "method",
            "name": "newViewCreateStruct",
            "params": [
                {
                    "name": "identifier",
                    "description": "unique view identifier (e.g. \"my-new-view\")",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "the view type to create",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"ContentQuery\""
                }
            ],
            "return": {
                "description": "",
                "type": "ViewCreateStruct"
            },
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 151,
            "description": "Returns create structure for Relation",
            "itemtype": "method",
            "name": "newRelationCreateStruct",
            "params": [
                {
                    "name": "destination",
                    "description": "reference to the resource we want to make related",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "RelationCreateStruct"
            },
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 162,
            "description": "Returns create structure for ObjectStateGroup",
            "itemtype": "method",
            "name": "newObjectStateGroupCreateStruct",
            "params": [
                {
                    "name": "identifier",
                    "description": "unique ObjectStateGroup identifier (e.g. \"some-new-group\")",
                    "type": "String"
                },
                {
                    "name": "languageCode",
                    "description": "The language code (eng-GB, fre-FR, ...)",
                    "type": "String"
                },
                {
                    "name": "names",
                    "description": "Multi language value (see example)",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "ObjectStateGroupCreateStruct"
            },
            "example": [
                "\n     var objectStateGroupCreateStruct = contentService.newObjectStateGroupCreateStruct(\n         \"some-id\", \"eng-US\", [{\n             \"_languageCode\":\"eng-US\",\n             \"#text\":\"Some Name\"\n         }]\n     );"
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 182,
            "description": "Returns update structure for ObjectStateGroup",
            "itemtype": "method",
            "name": "newObjectStateGroupUpdateStruct",
            "return": {
                "description": "ObjectStateGroupUpdateStruct"
            },
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 192,
            "description": "Returns create structure for ObjectState",
            "itemtype": "method",
            "name": "newObjectStateCreateStruct",
            "params": [
                {
                    "name": "identifier",
                    "description": "unique ObjectState identifier (e.g. \"some-new-state\")",
                    "type": "String"
                },
                {
                    "name": "languageCode",
                    "description": "The language code (eng-GB, fre-FR, ...)",
                    "type": "String"
                },
                {
                    "name": "priority",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "names",
                    "description": "Multi language value (see example)",
                    "type": "Array"
                },
                {
                    "name": "descriptions",
                    "description": "Multi language value (see example)",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "ObjectStateCreateStruct"
            },
            "example": [
                "\n     var objectStateCreateStruct = contentService.newObjectStateCreateStruct(\n         \"some-id\", \"eng-US\", 0, [{\n             \"_languageCode\":\"eng-US\",\n             \"#text\":\"Some Name\"\n         }], [{\n             \"_languageCode\":\"eng-US\",\n             \"#text\":\"Some Description\"\n         }]\n     );"
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 217,
            "description": "Returns update structure for ObjectState",
            "itemtype": "method",
            "name": "newObjectStateUpdateStruct",
            "return": {
                "description": "",
                "type": "ObjectStateUpdateStruct"
            },
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 227,
            "description": "Returns create structure for UrlAlias",
            "itemtype": "method",
            "name": "newUrlAliasCreateStruct",
            "params": [
                {
                    "name": "languageCode",
                    "description": "The language code (eng-GB, fre-FR, ...)",
                    "type": "String"
                },
                {
                    "name": "resource",
                    "description": "eZ Publish resource you want to create alias for",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "the new alias itself",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "UrlAliasCreateStruct"
            },
            "example": [
                "\n    var urlAliasCreateStruct = contentService.newUrlAliasCreateStruct(\n        \"eng-US\",\n        \"content/search\",\n        \"findme-alias\"\n    );"
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 246,
            "description": "Returns create structure for UrlWildcard",
            "itemtype": "method",
            "name": "newUrlWildcardCreateStruct",
            "params": [
                {
                    "name": "sourceUrl",
                    "description": "new url wildcard",
                    "type": "String"
                },
                {
                    "name": "destinationUrl",
                    "description": "existing resource where wildcard should point",
                    "type": "String"
                },
                {
                    "name": "forward",
                    "description": "weather or not the wildcard should redirect to the resource",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n    var urlWildcardCreateStruct = contentService.newUrlWildcardCreateStruct(\n        \"some-new-wildcard\",\n        \"/api/ezp/v2/content/locations/1/2/113\",\n        \"false\"\n    );"
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 268,
            "description": "Create a new section",
            "itemtype": "method",
            "name": "createSection",
            "params": [
                {
                    "name": "sectionInputStruct",
                    "description": "object describing section to be created",
                    "type": "SectionInputStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 298,
            "description": "Update target section",
            "itemtype": "method",
            "name": "updateSection",
            "params": [
                {
                    "name": "sectionId",
                    "description": "target section identifier (e.g. \"/api/ezp/v2/content/sections/2\")",
                    "type": "String"
                },
                {
                    "name": "sectionInputStruct",
                    "description": "object describing updates to the section",
                    "type": "SectionInputStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 317,
            "description": "List all available sections of eZ Publish instance",
            "itemtype": "method",
            "name": "loadSections",
            "params": [
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 346,
            "description": "Load single section",
            "itemtype": "method",
            "name": "loadSection",
            "params": [
                {
                    "name": "sectionId",
                    "description": "target section identifier (e.g. \"/api/ezp/v2/content/sections/2\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 364,
            "description": "Delete target section",
            "itemtype": "method",
            "name": "deleteSection",
            "params": [
                {
                    "name": "sectionId",
                    "description": "target section identifier (e.g. \"/api/ezp/v2/content/sections/2\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 386,
            "description": "Creates a new content draft assigned to the authenticated user.",
            "itemtype": "method",
            "name": "createContent",
            "params": [
                {
                    "name": "contentCreateStruct",
                    "description": "object describing content to be created",
                    "type": "ContentCreateStruct"
                },
                {
                    "name": "requestEventHandlers",
                    "description": "a set of callbacks to apply on a specific XHR event like onload, onerror, onprogress, etc.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n     var contentService = jsCAPI.getContentService();\n\n     contentService.createContent(\n         {\n             body: '',\n             headers: {}\n         },\n         {\n             upload: {\n                 onloadstart: someUploadCallback,\n                 onload: someUploadCallback,\n                 onloadend: someUploadCallback,\n                 onprogress: someUploadCallback,\n                 onabort: someUploadCallback,\n                 onerror: someUploadCallback,\n                 ontimeout: someUploadCallback,\n             },\n             onloadstart: someCallback,\n             onload: someCallback,\n             onloadend: someCallback,\n             onprogress: someCallback,\n             onabort: someCallback,\n             onerror: someCallback,\n             ontimeout: someCallback,\n         },\n         callback\n     );"
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 451,
            "description": "Update target content metadata.",
            "itemtype": "method",
            "name": "updateContentMetadata",
            "params": [
                {
                    "name": "contentId",
                    "description": "target content identifier (e.g. \"/api/ezp/v2/content/objects/108\")",
                    "type": "String"
                },
                {
                    "name": "contentMetadataUpdateStruct",
                    "description": "object describing update of the content metadata",
                    "type": "ContentMetadataUpdateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n     var updateStruct = contentService.newContentMetadataUpdateStruct(\"eng-US\");\n\n     updateStruct.body.ContentUpdate.Section = \"/api/ezp/v2/content/sections/2\";\n     updateStruct.body.ContentUpdate.remoteId = \"new-remote-id\";\n\n     contentService.updateContentMetadata(\n         \"/api/ezp/v2/content/objects/180\",\n         updateStruct,\n         callback\n     );"
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 481,
            "description": "Load single content by remoteId",
            "itemtype": "method",
            "name": "loadContentByRemoteId",
            "params": [
                {
                    "name": "remoteId",
                    "description": "remote id of target content object (e.g. \"30847bec12a8a398777493a4bdb10398\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 510,
            "description": "Load single content info",
            "itemtype": "method",
            "name": "loadContentInfo",
            "params": [
                {
                    "name": "contentId",
                    "description": "target content identifier (e.g. \"/api/ezp/v2/content/objects/108\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 528,
            "description": "Load single content info with embedded current version",
            "itemtype": "method",
            "name": "loadContentInfoAndCurrentVersion",
            "params": [
                {
                    "name": "contentId",
                    "description": "target content identifier (e.g. \"/api/ezp/v2/content/objects/108\")",
                    "type": "String"
                },
                {
                    "name": "languageCodes",
                    "description": "comma separated list of language codes\n(ie \"fre-FR,eng-GB\")",
                    "type": "String",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 552,
            "description": "Delete target content",
            "itemtype": "method",
            "name": "deleteContent",
            "params": [
                {
                    "name": "contentId",
                    "description": "target content identifier (e.g. \"/api/ezp/v2/content/objects/108\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n     contentService.deleteContent(\n         \"/api/ezp/v2/content/objects/116\",\n         callback\n     );"
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 575,
            "description": "Copy content to determined location",
            "itemtype": "method",
            "name": "copyContent",
            "params": [
                {
                    "name": "contentId",
                    "description": "target content identifier (e.g. \"/api/ezp/v2/content/objects/108\")",
                    "type": "String"
                },
                {
                    "name": "destinationId",
                    "description": "A location resource to which the content object should be copied (e.g. \"/api/ezp/v2/content/locations/1/2/119\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 598,
            "description": "Loads user drafts",
            "itemtype": "method",
            "name": "loadUserDrafts",
            "params": [
                {
                    "name": "userId",
                    "description": "target user identifier (e.g. \"/api/ezp/v2/user/users/14\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}} Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 616,
            "description": "Load current version for target content",
            "itemtype": "method",
            "name": "loadCurrentVersion",
            "params": [
                {
                    "name": "contentId",
                    "description": "target content identifier (e.g. \"/api/ezp/v2/content/objects/108\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 648,
            "description": "Loads a specific version of target content. This method returns fields and relations",
            "itemtype": "method",
            "name": "loadContent",
            "params": [
                {
                    "name": "versionedContentId",
                    "description": "target version identifier (e.g. \"/api/ezp/v2/content/objects/108/versions/2\")",
                    "type": "String"
                },
                {
                    "name": "languages",
                    "description": "(comma separated list) restricts the output of translatable fields to the given languages.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "''"
                },
                {
                    "name": "fields",
                    "description": "comma separated list of fields which should be returned in the response (see Content).",
                    "type": "String",
                    "optional": true,
                    "optdefault": "''"
                },
                {
                    "name": "responseGroups",
                    "description": "alternative: comma separated lists of predefined field groups (see REST API Spec v1).",
                    "type": "String",
                    "optional": true,
                    "optdefault": "''"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    contentService.loadContent(\n         '/api/ezp/v2/content/objects/180/versions/1',\n         'eng-US',\n         '',\n         '',\n         callback\n    );"
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 701,
            "description": "Loads all versions for the target content",
            "itemtype": "method",
            "name": "loadVersions",
            "params": [
                {
                    "name": "contentId",
                    "description": "target content identifier (e.g. \"/api/ezp/v2/content/objects/108\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 733,
            "description": "Updates the fields of a target draft",
            "itemtype": "method",
            "name": "updateContent",
            "params": [
                {
                    "name": "versionedContentId",
                    "description": "target version identifier (e.g. \"/api/ezp/v2/content/objects/108/versions/2\")",
                    "type": "String"
                },
                {
                    "name": "contentUpdateStruct",
                    "description": "object describing update to the draft",
                    "type": "ContentUpdateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 752,
            "description": "Creates a draft from a published or archived version.",
            "itemtype": "method",
            "name": "createContentDraft",
            "params": [
                {
                    "name": "contentId",
                    "description": "target content identifier (e.g. \"/api/ezp/v2/content/objects/108\")",
                    "type": "String"
                },
                {
                    "name": "versionId",
                    "description": "numerical id of the base version for the new draft.\nIf not provided the current version of the content will be used.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n     // Create draft from current version\n     contentService.createContentDraft(\n         \"/api/ezp/v2/content/objects/107\",\n         null,\n         callback\n     );\n\n     // Create draft from version #2\n     contentService.createContentDraft(\n         \"/api/ezp/v2/content/objects/107\",\n         2,\n         callback\n     );"
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 808,
            "description": "Deletes target version of the content.",
            "itemtype": "method",
            "name": "deleteVersion",
            "params": [
                {
                    "name": "versionedContentId",
                    "description": "target version identifier (e.g. \"/api/ezp/v2/content/objects/108/versions/2\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 826,
            "description": "Publishes target version of the content.",
            "itemtype": "method",
            "name": "publishVersion",
            "params": [
                {
                    "name": "versionedContentId",
                    "description": "target version identifier (e.g. \"/api/ezp/v2/content/objects/108/versions/2\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 848,
            "description": "Creates a new location for target content object",
            "itemtype": "method",
            "name": "createLocation",
            "params": [
                {
                    "name": "contentId",
                    "description": "target content identifier (e.g. \"/api/ezp/v2/content/objects/108\")",
                    "type": "String"
                },
                {
                    "name": "locationCreateStruct",
                    "description": "object describing new location to be created",
                    "type": "LocationCreateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 881,
            "description": "Loads all locations for target content object",
            "itemtype": "method",
            "name": "loadLocations",
            "params": [
                {
                    "name": "contentId",
                    "description": "target content identifier (e.g. \"/api/ezp/v2/content/objects/108\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 913,
            "description": "Loads target location",
            "itemtype": "method",
            "name": "loadLocation",
            "params": [
                {
                    "name": "locationId",
                    "description": "target location identifier (e.g. \"/api/ezp/v2/content/locations/1/2/102\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 931,
            "description": "Loads target location by remote Id",
            "itemtype": "method",
            "name": "loadLocationByRemoteId",
            "params": [
                {
                    "name": "remoteId",
                    "description": "remote id of target location (e.g. \"0bae96bd419e141ff3200ccbf2822e4f\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 959,
            "description": "Updates target location",
            "itemtype": "method",
            "name": "updateLocation",
            "params": [
                {
                    "name": "locationId",
                    "description": "target location identifier (e.g. \"/api/ezp/v2/content/locations/1/2/102\")",
                    "type": "String"
                },
                {
                    "name": "locationUpdateStruct",
                    "description": "object describing changes to target location",
                    "type": "LocationUpdateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 978,
            "description": "Loads children for the target location",
            "itemtype": "method",
            "name": "loadLocationChildren",
            "params": [
                {
                    "name": "locationId",
                    "description": "target location identifier (e.g. \"/api/ezp/v2/content/locations/1/2/102\")",
                    "type": "String"
                },
                {
                    "name": "limit",
                    "description": "the number of results returned",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "-1"
                },
                {
                    "name": "offset",
                    "description": "the offset of the result set",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    contentService.loadLocationChildren(\n        \"/api/ezp/v2/content/locations/1/2/102\",\n        5,\n        5,\n        callback\n    );"
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1036,
            "description": "Copies the subtree starting from \"subtree\" as a new subtree of \"targetLocation\"",
            "itemtype": "method",
            "name": "copySubtree",
            "params": [
                {
                    "name": "subtree",
                    "description": "source subtree location",
                    "type": "String"
                },
                {
                    "name": "targetLocation",
                    "description": "location where source subtree should be copied",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1055,
            "description": "Moves the subtree to a new subtree of \"targetLocation\"\nThe targetLocation can also be /content/trash, in that case the location is put into the trash.",
            "itemtype": "method",
            "name": "moveSubtree",
            "params": [
                {
                    "name": "subtree",
                    "description": "source subtree location",
                    "type": "String"
                },
                {
                    "name": "targetLocation",
                    "description": "location where source subtree should be moved",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1075,
            "description": "Swaps the location of the \"subtree\" with \"targetLocation\"",
            "itemtype": "method",
            "name": "swapLocation",
            "params": [
                {
                    "name": "subtree",
                    "description": "source subtree location",
                    "type": "String"
                },
                {
                    "name": "targetLocation",
                    "description": "location with which subtree location should be swapped",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1094,
            "description": "Deletes the location and all it's subtrees\nEvery content object is deleted which does not have any other location.\nOtherwise the deleted location is removed from the content object.\nThe children are recursively deleted.",
            "itemtype": "method",
            "name": "deleteLocation",
            "params": [
                {
                    "name": "locationId",
                    "description": "target location identifier (e.g. \"/api/ezp/v2/content/locations/1/2/102\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1119,
            "description": "Creates a new view. Views are used to perform content queries by certain criteria.",
            "itemtype": "method",
            "name": "createView",
            "params": [
                {
                    "name": "viewCreateStruct",
                    "description": "object describing new view to be created",
                    "type": "ViewCreateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var viewCreateStruct = contentService.newViewCreateStruct('some-test-id', 'LocationQuery');\n    viewCreateStruct.body.ViewInput.LocationQuery.Query = {\n        FullTextCriterion : \"title\"\n    };\n    contentService.createView(\n        viewCreateStruct,\n        callback\n    );"
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1165,
            "description": "Loads the relations of the target version.",
            "itemtype": "method",
            "name": "loadRelations",
            "params": [
                {
                    "name": "versionedContentId",
                    "description": "target version identifier (e.g. \"/api/ezp/v2/content/objects/108/versions/2\")",
                    "type": "String"
                },
                {
                    "name": "limit",
                    "description": "the number of results returned",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "-1"
                },
                {
                    "name": "offset",
                    "description": "the offset of the result set",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    //See loadLocationChildren for example of \"offset\" and \"limit\" arguments usage"
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1219,
            "description": "Loads the relations of the target content's current version",
            "itemtype": "method",
            "name": "loadCurrentRelations",
            "params": [
                {
                    "name": "contentId",
                    "description": "target content identifier (e.g. \"/api/ezp/v2/content/objects/102\")",
                    "type": "String"
                },
                {
                    "name": "limit",
                    "description": "the number of results returned",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "-1"
                },
                {
                    "name": "offset",
                    "description": "the offset of the result set",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    //See loadLocationChildren for example of \"offset\" and \"limit\" arguments usage"
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1272,
            "description": "Loads target relation",
            "itemtype": "method",
            "name": "loadRelation",
            "params": [
                {
                    "name": "relationId",
                    "description": "target relation identifier (e.g. \"/api/ezp/v2/content/objects/102/versions/5/relations/1\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1290,
            "description": "Creates a new relation of type COMMON for the given draft.",
            "itemtype": "method",
            "name": "addRelation",
            "params": [
                {
                    "name": "versionedContentId",
                    "description": "target version identifier (e.g. \"/api/ezp/v2/content/objects/102/versions/5\")",
                    "type": "String"
                },
                {
                    "name": "relationCreateStruct",
                    "description": "object describing new relation to be created",
                    "type": "RelationCreateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var relationCreateStruct = contentService.newRelationCreateStruct(\"/api/ezp/v2/content/objects/132\");\n    contentService.addRelation(\n        \"/api/ezp/v2/content/objects/102/versions/5\",\n        relationCreateStruct,\n        callback\n    );"
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1331,
            "description": "Delete target relation",
            "itemtype": "method",
            "name": "deleteRelation",
            "params": [
                {
                    "name": "relationId",
                    "description": "target relation identifier (e.g. \"/api/ezp/v2/content/objects/102/versions/5/relations/1\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1353,
            "description": "Loads all the trash can items",
            "itemtype": "method",
            "name": "loadTrashItems",
            "params": [
                {
                    "name": "limit",
                    "description": "the number of results returned",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "-1"
                },
                {
                    "name": "offset",
                    "description": "the offset of the result set",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    //See loadLocationChildren for example of \"offset\" and \"limit\" arguments usage"
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1403,
            "description": "Loads target trash can item",
            "itemtype": "method",
            "name": "loadTrashItem",
            "params": [
                {
                    "name": "trashItemId",
                    "description": "target trash item identifier (e.g. \"/api/ezp/v2/content/trash/1\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1421,
            "description": "Restores target trashItem",
            "itemtype": "method",
            "name": "recover",
            "params": [
                {
                    "name": "trashItemId",
                    "description": "target trash item identifier (e.g. \"/api/ezp/v2/content/trash/1\")",
                    "type": "String"
                },
                {
                    "name": "destination",
                    "description": "if given the trash item is restored under this location otherwise under its original parent location",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1449,
            "description": "Delete target trashItem",
            "itemtype": "method",
            "name": "deleteTrashItem",
            "params": [
                {
                    "name": "trashItemId",
                    "description": "target trash item identifier (e.g. \"/api/ezp/v2/content/trash/1\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1467,
            "description": "Empty the trash can",
            "itemtype": "method",
            "name": "emptyThrash",
            "params": [
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "since 1.1 and will be removed in 2.0. Is replaced `emptyTrash` which has the same behavior",
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1484,
            "description": "Empty the trash can",
            "itemtype": "method",
            "name": "emptyTrash",
            "params": [
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1517,
            "description": "Loads all the ObjectState groups",
            "itemtype": "method",
            "name": "loadObjectStateGroups",
            "params": [
                {
                    "name": "objectStateGroups",
                    "description": "path to root objectStateGroups (will be replaced by auto-discovered soon)",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1535,
            "description": "Loads target ObjectState group",
            "itemtype": "method",
            "name": "loadObjectStateGroup",
            "params": [
                {
                    "name": "objectStateGroupId",
                    "description": "target object state group identifier (e.g. \"/api/ezp/v2/content/objectstategroups/2\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1553,
            "description": "Create a new ObjectState group",
            "itemtype": "method",
            "name": "createObjectStateGroup",
            "params": [
                {
                    "name": "objectStateGroups",
                    "description": "path to root objectStateGroups (will be replaced by auto-discovered soon)",
                    "type": "String"
                },
                {
                    "name": "objectStateGroupCreateStruct",
                    "description": "object describing new ObjectState group to be created",
                    "type": "ObjectStateGroupCreateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1572,
            "description": "Update target ObjectState group",
            "itemtype": "method",
            "name": "updateObjectStateGroup",
            "params": [
                {
                    "name": "objectStateGroupId",
                    "description": "target object state group identifier (e.g. \"/api/ezp/v2/content/objectstategroups/2\")",
                    "type": "String"
                },
                {
                    "name": "objectStateGroupUpdateStruct",
                    "description": "object describing changes to target ObjectState group",
                    "type": "ObjectStateGroupUpdateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1591,
            "description": "Delete target ObjectState group",
            "itemtype": "method",
            "name": "deleteObjectStateGroup",
            "params": [
                {
                    "name": "objectStateGroupId",
                    "description": "target object state group identifier (e.g. \"/api/ezp/v2/content/objectstategroups/2\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1609,
            "description": "Creates a new ObjectState in target group",
            "itemtype": "method",
            "name": "createObjectState",
            "params": [
                {
                    "name": "objectStateGroupId",
                    "description": "target group, where new object state should be created (e.g. \"/api/ezp/v2/content/objectstategroups/2\")",
                    "type": "String"
                },
                {
                    "name": "objectStateCreateStruct",
                    "description": "object describing new ObjectState to be created",
                    "type": "ObjectStateCreateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1628,
            "description": "Load target ObjectState",
            "itemtype": "method",
            "name": "loadObjectState",
            "params": [
                {
                    "name": "objectStateId",
                    "description": "target object state identifier (e.g. \"/api/ezp/v2/content/objectstategroups/7/objectstates/5\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1646,
            "description": "Update target ObjectState",
            "itemtype": "method",
            "name": "updateObjectState",
            "params": [
                {
                    "name": "objectStateId",
                    "description": "target object state identifier (e.g. \"/api/ezp/v2/content/objectstategroups/7/objectstates/5\")",
                    "type": "String"
                },
                {
                    "name": "objectStateUpdateStruct",
                    "description": "object describing changes to target ObjectState",
                    "type": "ObjectStateUpdateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1665,
            "description": "Delete target ObjectState",
            "itemtype": "method",
            "name": "deleteObjectState",
            "params": [
                {
                    "name": "objectStateId",
                    "description": "target object state identifier (e.g. \"/api/ezp/v2/content/objectstategroups/7/objectstates/5\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1683,
            "description": "Get ObjectStates of target content",
            "itemtype": "method",
            "name": "getContentState",
            "params": [
                {
                    "name": "contentStatesId",
                    "description": "link to target content's object states (should be auto-discovered from contentId)",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1701,
            "description": "Set ObjectStates of a content",
            "itemtype": "method",
            "name": "setContentState",
            "params": [
                {
                    "name": "contentStatesId",
                    "description": "link to target content's object states (should be auto-discovered from contentId)",
                    "type": "String"
                },
                {
                    "name": "objectStates",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n   contentService.loadObjectState(\n        \"/api/ezp/v2/content/objectstategroups/4/objectstates/3\",\n        function (error, objectStateResponse) {\n            // possible error should be handled...\n\n            var objectStates = {};\n            // Extra odd structure, but it works!\n            objectStates.ObjectState = {};\n            objectStates.ObjectState.ObjectState = {};\n            objectStates.ObjectState.ObjectState = JSON.parse(objectStateResponse.body);\n\n            contentService.setContentState(\n                \"/api/ezp/v2/content/objects/17/objectstates\",\n                objectStates,\n                callback\n            );\n        }\n   );"
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1746,
            "description": "Creates a new UrlAlias",
            "itemtype": "method",
            "name": "createUrlAlias",
            "params": [
                {
                    "name": "urlAliases",
                    "description": "link to root UrlAliases resource (should be auto-discovered)",
                    "type": "String"
                },
                {
                    "name": "urlAliasCreateStruct",
                    "description": "object describing new UrlAlias to be created",
                    "type": "UrlAliasCreateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1765,
            "description": "Loads all the global UrlAliases",
            "itemtype": "method",
            "name": "loadUrlAliases",
            "params": [
                {
                    "name": "urlAliases",
                    "description": "link to root UrlAliases resource (should be auto-discovered)",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1783,
            "description": "Loads all the UrlAliases for a location",
            "itemtype": "method",
            "name": "listLocationAliases",
            "params": [
                {
                    "name": "locationUrlAliases",
                    "description": "link to target location's UrlAliases (should be auto-discovered from locationId)",
                    "type": "String"
                },
                {
                    "name": "custom",
                    "description": "this flag indicates weather autogenerated (false) or manual url aliases (true) should be returned",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1813,
            "description": "Load target URL Alias",
            "itemtype": "method",
            "name": "loadUrlAlias",
            "params": [
                {
                    "name": "urlAliasId",
                    "description": "target url alias identifier (e.g. \"/api/ezp/v2/content/urlaliases/0-a903c03b86eb2987889afa5fe17004eb\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1831,
            "description": "Delete target URL Alias",
            "itemtype": "method",
            "name": "deleteUrlAlias",
            "params": [
                {
                    "name": "urlAliasId",
                    "description": "target url alias identifier (e.g. \"/api/ezp/v2/content/urlaliases/0-a903c03b86eb2987889afa5fe17004eb\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1853,
            "description": "Creates a new UrlWildcard",
            "itemtype": "method",
            "name": "createUrlWildcard",
            "params": [
                {
                    "name": "urlWildcards",
                    "description": "link to root UrlWildcards resource (should be auto-discovered)",
                    "type": "String"
                },
                {
                    "name": "urlWildcardCreateStruct",
                    "description": "object describing new UrlWildcard to be created",
                    "type": "UrlWildcardCreateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1872,
            "description": "Loads all UrlWildcards",
            "itemtype": "method",
            "name": "loadUrlWildcards",
            "params": [
                {
                    "name": "urlWildcards",
                    "description": "link to root UrlWildcards resource (should be auto-discovered)",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1890,
            "description": "Loads target UrlWildcard",
            "itemtype": "method",
            "name": "loadUrlWildcard",
            "params": [
                {
                    "name": "urlWildcardId",
                    "description": "target url wildcard identifier (e.g. \"/api/ezp/v2/content/urlwildcards/1\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1908,
            "description": "Deletes target UrlWildcard",
            "itemtype": "method",
            "name": "deleteUrlWildcard",
            "params": [
                {
                    "name": "urlWildcardId",
                    "description": "target url wildcard identifier (e.g. \"/api/ezp/v2/content/urlwildcards/1\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n{{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentService.js",
            "line": 1926,
            "description": "Loads an image variation",
            "itemtype": "method",
            "name": "loadImageVariation",
            "params": [
                {
                    "name": "variation",
                    "description": "The variation REST id",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback executed after performing the request (see\n {{#crossLink \"ContentService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 52,
            "description": "Returns content type group create structure",
            "itemtype": "method",
            "name": "newContentTypeGroupInputStruct",
            "params": [
                {
                    "name": "identifier",
                    "description": "unique content type group identifer (e.g. \"my-group\")",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "ContentTypeGroupInputStruct"
            },
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 63,
            "itemtype": "method",
            "name": "newContentTypeCreateStruct",
            "params": [
                {
                    "name": "identifier",
                    "description": "unique content type identifer (e.g. \"my-type\")",
                    "type": "String"
                },
                {
                    "name": "languageCode",
                    "description": "The language code (eng-GB, fre-FR, ...)",
                    "type": "String"
                },
                {
                    "name": "names",
                    "description": "Multi language value (see example)",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "ContentTypeCreateStruct"
            },
            "example": [
                "\n     var contentTypeCreateStruct = contentTypeService.newContentTypeCreateStruct(\n         \"some-id\", \"eng-US\", [{\n             \"_languageCode\":\"eng-US\",\n             \"#text\":\"Some Name\"\n         }]\n     );"
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 81,
            "itemtype": "method",
            "name": "newContentTypeUpdateStruct",
            "return": {
                "description": "",
                "type": "ContentTypeUpdateStruct"
            },
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 89,
            "itemtype": "method",
            "name": "newFieldDefinitionCreateStruct",
            "params": [
                {
                    "name": "identifier",
                    "description": "unique field definiton identifer (e.g. \"my-field\")",
                    "type": "String"
                },
                {
                    "name": "fieldType",
                    "description": "identifier of existing field type (e.g. \"ezstring\", \"ezdate\")",
                    "type": "String"
                },
                {
                    "name": "fieldGroup",
                    "description": "identifier of existing field group (e.g. \"content\", \"meta\")",
                    "type": "String"
                },
                {
                    "name": "names",
                    "description": "Multi language value (see example)",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "FieldDefinitionCreateStruct"
            },
            "example": [
                "\n    var fieldDefinition = contentTypeService.newFieldDefinitionCreateStruct(\n        \"my-new-field\", \"ezstring\", \"content\", [{\n            \"_languageCode\":\"eng-US\",\n            \"#text\":\"Subtitle\"\n        }]\n    );"
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 108,
            "itemtype": "method",
            "name": "newFieldDefinitionUpdateStruct",
            "return": {
                "description": "",
                "type": "FieldDefinitionUpdateStruct"
            },
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 120,
            "description": "Create a content type group",
            "itemtype": "method",
            "name": "createContentTypeGroup",
            "params": [
                {
                    "name": "contentTypeGroups",
                    "description": "link to root ContentTypeGroups resource (should be auto-discovered)",
                    "type": "String"
                },
                {
                    "name": "contentTypeGroupCreateStruct",
                    "description": "object describing the new group to be created",
                    "type": "ContentTypeGroupInputStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\n\n    var contentTypeGroupCreateStruct = contentTypeService.newContentTypeGroupInputStruct(\n        \"new-group-id\"\n    );\n\n    contentTypeService.createContentTypeGroup(\n        \"/api/ezp/v2/content/typegroups\",\n        contentTypeGroupCreateStruct,\n        callback\n    );"
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 151,
            "description": "Load all content type groups",
            "itemtype": "method",
            "name": "loadContentTypeGroups",
            "params": [
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 177,
            "description": "Load single content type group",
            "itemtype": "method",
            "name": "loadContentTypeGroup",
            "params": [
                {
                    "name": "contentTypeGroupId",
                    "description": "target content type group identifier (e.g. \"/api/ezp/v2/content/types/100\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 195,
            "description": "Update a content type group",
            "itemtype": "method",
            "name": "updateContentTypeGroup",
            "params": [
                {
                    "name": "contentTypeGroupId",
                    "description": "target content type group identifier (e.g. \"/api/ezp/v2/content/types/100\")",
                    "type": "String"
                },
                {
                    "name": "contentTypeGroupUpdateStruct",
                    "description": "object describing changes to the content type group",
                    "type": "ContentTypeGroupInputStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 214,
            "description": "Delete content type group",
            "itemtype": "method",
            "name": "deleteContentTypeGroup",
            "params": [
                {
                    "name": "contentTypeGroupId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 232,
            "description": "List content for a content type group",
            "itemtype": "method",
            "name": "loadContentTypes",
            "params": [
                {
                    "name": "contentTypeGroupId",
                    "description": "target content type group identifier (e.g. \"/api/ezp/v2/content/typegroups/1\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 264,
            "itemtype": "method",
            "name": "loadContentTypeGroupByIdentifier",
            "params": [
                {
                    "name": "contentTypeGroups",
                    "description": "link to root ContentTypeGroups resource (should be auto-discovered)",
                    "type": "String"
                },
                {
                    "name": "identifier",
                    "description": "target content type group identifier (e.g. \"content\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 285,
            "description": "Create a content type",
            "itemtype": "method",
            "name": "createContentType",
            "params": [
                {
                    "name": "contentTypeGroupId",
                    "description": "target content type group identifier (e.g. \"/api/ezp/v2/content/typegroups/1\")",
                    "type": "String"
                },
                {
                    "name": "contentTypeCreateStruct",
                    "description": "object describing the new content type to be created",
                    "type": "ContentTypeCreateStruct"
                },
                {
                    "name": "publish",
                    "description": "weather the content type should be immediately published or not",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\n    var contentTypeCreateStruct, fieldDefinition;\n\n    contentTypeCreateStruct = contentTypeService.newContentTypeCreateStruct(\n         \"some-id\", \"eng-US\", [{\n             \"_languageCode\":\"eng-US\",\n             \"#text\":\"Some Name\"\n         }]\n    );\n\n    fieldDefinition = contentTypeService.newFieldDefinitionCreateStruct(\n        \"my-new-field\", \"ezstring\", \"content\", [{\n            \"_languageCode\":\"eng-US\",\n            \"#text\":\"Subtitle\"\n        }]\n    );\n\n    contentTypeCreateStruct.body.ContentTypeCreate.FieldDefinitions.FieldDefinition.push(fieldDefinition.body.FieldDefinitionCreate);\n\n    contentTypeService.createContentType(\n        \"/api/ezp/v2/content/typegroups/1\",\n        contentTypeCreateStruct,\n        true,\n        callback\n    );"
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 346,
            "description": "Make a copy of the target content type",
            "itemtype": "method",
            "name": "copyContentType",
            "params": [
                {
                    "name": "contentTypeId",
                    "description": "target content type identifier (e.g. \"/api/ezp/v2/content/types/18\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 364,
            "description": "Load the target content type",
            "itemtype": "method",
            "name": "loadContentType",
            "params": [
                {
                    "name": "contentTypeId",
                    "description": "target content type identifier (e.g. \"/api/ezp/v2/content/types/18\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 382,
            "description": "Load content type by the string identifier",
            "itemtype": "method",
            "name": "loadContentTypeByIdentifier",
            "params": [
                {
                    "name": "identifier",
                    "description": "target content type string identifier (e.g. \"blog\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 411,
            "description": "Delete the target content type",
            "itemtype": "method",
            "name": "deleteContentType",
            "params": [
                {
                    "name": "contentTypeId",
                    "description": "target content type identifier (e.g. \"/api/ezp/v2/content/types/18\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 429,
            "description": "Load content type groups of the target content type",
            "itemtype": "method",
            "name": "loadGroupsOfContentType",
            "params": [
                {
                    "name": "contentTypeId",
                    "description": "target content type identifier (e.g. \"/api/ezp/v2/content/types/18\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 447,
            "description": "Assign the target content type to the target content type group",
            "itemtype": "method",
            "name": "assignContentTypeGroup",
            "params": [
                {
                    "name": "contentTypeId",
                    "description": "target content type identifier (e.g. \"/api/ezp/v2/content/types/18\")",
                    "type": "String"
                },
                {
                    "name": "groupId",
                    "description": "target content type group identifier (e.g. \"/api/ezp/v2/content/typegroups/2\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 466,
            "description": "Remove content type assignment to the target content type group",
            "itemtype": "method",
            "name": "unassignContentTypeGroup",
            "params": [
                {
                    "name": "contentTypeAssignedGroupId",
                    "description": "target content type group assignment  (e.g. \"/api/ezp/v2/content/types/18/groups/1\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 488,
            "description": "Create a new content type draft based on the target content type",
            "itemtype": "method",
            "name": "createContentTypeDraft",
            "params": [
                {
                    "name": "contentTypeId",
                    "description": "target content type identifier (e.g. \"/api/ezp/v2/content/types/18\")",
                    "type": "String"
                },
                {
                    "name": "contentTypeUpdateStruct",
                    "description": "object describing changes to the content type",
                    "type": "ContentTypeUpdateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var contentTypeUpdateStruct = contentTypeService.newContentTypeUpdateStruct();\n\n    contentTypeUpdateStruct.names = {};\n    contentTypeUpdateStruct.names.value = [{\n        \"_languageCode\":\"eng-US\",\n        \"#text\":\"My changed content type\"\n    }]\n\n    contentTypeService.createContentTypeDraft(\n        \"/api/ezp/v2/content/types/18\",\n        contentTypeUpdateStruct,\n        callback\n    );"
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 521,
            "description": "Load draft of the target content type",
            "itemtype": "method",
            "name": "loadContentTypeDraft",
            "params": [
                {
                    "name": "contentTypeId",
                    "description": "target content type identifier (e.g. \"/api/ezp/v2/content/types/18\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 539,
            "description": "Update the target content type draft metadata. This method does not handle field definitions",
            "itemtype": "method",
            "name": "updateContentTypeDraftMetadata",
            "params": [
                {
                    "name": "contentTypeDraftId",
                    "description": "target content type draft identifier (e.g. \"/api/ezp/v2/content/types/18/draft\")",
                    "type": "String"
                },
                {
                    "name": "contentTypeUpdateStruct",
                    "description": "object describing changes to the draft",
                    "type": "ContentTypeUpdateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 558,
            "description": "Publish the target content type draft",
            "itemtype": "method",
            "name": "publishContentTypeDraft",
            "params": [
                {
                    "name": "contentTypeDraftId",
                    "description": "target content type draft identifier (e.g. \"/api/ezp/v2/content/types/18/draft\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 576,
            "description": "Delete the target content type draft",
            "itemtype": "method",
            "name": "deleteContentTypeDraft",
            "params": [
                {
                    "name": "contentTypeDraftId",
                    "description": "target content type draft identifier (e.g. \"/api/ezp/v2/content/types/18/draft\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 598,
            "description": "Add a new field definition to the target Content Type draft",
            "itemtype": "method",
            "name": "addFieldDefinition",
            "params": [
                {
                    "name": "contentTypeId",
                    "description": "target content type identifier (e.g. \"/api/ezp/v2/content/types/18\")",
                    "type": "String"
                },
                {
                    "name": "fieldDefinitionCreateStruct",
                    "description": "object describing the new field definition to be created",
                    "type": "FieldDefinitionCreateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 631,
            "description": "Load the target field definition",
            "itemtype": "method",
            "name": "loadFieldDefinition",
            "params": [
                {
                    "name": "fieldDefinitionId",
                    "description": "target field definition identifier (e.g. \"/api/ezp/v2/content/types/42/fieldDefinitions/311\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 649,
            "description": "Update the target (existing) field definition",
            "itemtype": "method",
            "name": "updateFieldDefinition",
            "params": [
                {
                    "name": "fieldDefinitionId",
                    "description": "target field definition identifier (e.g. \"/api/ezp/v2/content/types/42/fieldDefinitions/311\")",
                    "type": "String"
                },
                {
                    "name": "fieldDefinitionUpdateStruct",
                    "description": "object describing changes to the target field definition",
                    "type": "FieldDefinitionUpdateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/ContentTypeService.js",
            "line": 668,
            "description": "Delete existing field definition",
            "itemtype": "method",
            "name": "deleteFieldDefinition",
            "params": [
                {
                    "name": "fieldDefinitionId",
                    "description": "target field definition identifier (e.g. \"/api/ezp/v2/content/types/42/fieldDefinitions/311\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"ContentTypeService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "ContentTypeService"
        },
        {
            "file": "src/services/DiscoveryService.js",
            "line": 21,
            "description": "Get the information for given object name (located under the root).\nThe information is provided as the second argument of the callback unless there's a\nnetwork issue while loading the REST root resource or if there's no resource\nassociated with the given name.",
            "itemtype": "method",
            "name": "getInfoObject",
            "params": [
                {
                    "name": "name",
                    "description": "name of the target object (located under the root, e.g. \"Trash\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "false or CAPIError object if an\nerror occurred",
                            "type": "Boolean|CAPIError"
                        },
                        {
                            "name": "response",
                            "description": "the target object if\nit was found, the Response object if an error occurred while loading the\nREST root or false if the name does not match any object.",
                            "type": "Object|Response|Boolean"
                        }
                    ]
                }
            ],
            "class": "DiscoveryService"
        },
        {
            "file": "src/services/DiscoveryService.js",
            "line": 66,
            "description": "Load the REST root resource",
            "itemtype": "method",
            "name": "_discoverRoot",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "rootPath",
                    "description": "path to Root resource",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "false or CAPIError object if an\nerror occurred",
                            "type": "Boolean|CAPIError"
                        },
                        {
                            "name": "response",
                            "description": "true if the root was\nsuccessfully loaded, the Response otherwise",
                            "type": "Boolean|Response"
                        }
                    ]
                }
            ],
            "class": "DiscoveryService"
        },
        {
            "file": "src/services/DiscoveryService.js",
            "line": 99,
            "description": "Copy all the properties of the target object into the cache",
            "itemtype": "method",
            "name": "_copyToCache",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "the object to cache",
                    "type": "Object"
                }
            ],
            "class": "DiscoveryService"
        },
        {
            "file": "src/services/PromiseService.js",
            "line": 17,
            "description": "Generate a new function, that if called assured `this` is mapped to\nthe original service.",
            "itemtype": "method",
            "name": "_generateMappedFunction",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "originalFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "PromiseService"
        },
        {
            "file": "src/services/PromiseService.js",
            "line": 33,
            "description": "Generate a promise version of the given function\n\nThe execution is mapped to the originalService in order to preserve all\ninternal state manipulations.",
            "itemtype": "method",
            "name": "_generatePromiseFunction",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "originalFunction",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "PromiseService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 50,
            "description": "Returns session create structure",
            "itemtype": "method",
            "name": "newSessionCreateStruct",
            "params": [
                {
                    "name": "login",
                    "description": "user's login",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "user's password",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "SessionCreateStruct"
            },
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 62,
            "description": "Returns user group create structure",
            "itemtype": "method",
            "name": "newUserGroupCreateStruct",
            "params": [
                {
                    "name": "language",
                    "description": "The language code (eng-GB, fre-FR, ...)",
                    "type": "String"
                },
                {
                    "name": "fields",
                    "description": "fields array (see example)",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "UserGroupCreateStruct"
            },
            "example": [
                "\n    var userGroupCreateStruct = userService.newUserGroupCreateStruct(\n        \"eng-US\",[{\n            fieldDefinitionIdentifier: \"name\",\n            languageCode: \"eng-US\",\n            fieldValue: \"UserGroup\"\n        }, {\n            fieldDefinitionIdentifier: \"description\",\n            languageCode: \"eng-US\",\n            fieldValue: \"This is the description of the user group\"\n        }]\n    );"
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 86,
            "description": "User group update structure",
            "itemtype": "method",
            "name": "newUserGroupUpdateStruct",
            "return": {
                "description": "",
                "type": "UserGroupCreateStruct"
            },
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 96,
            "description": "User create structure",
            "itemtype": "method",
            "name": "newUserCreateStruct",
            "params": [
                {
                    "name": "languageCode",
                    "description": "The language code (eng-GB, fre-FR, ...)",
                    "type": "String"
                },
                {
                    "name": "login",
                    "description": "login for a new user",
                    "type": "String"
                },
                {
                    "name": "email",
                    "description": "email for a new user",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "password for a new user",
                    "type": "String"
                },
                {
                    "name": "fields",
                    "description": "fields array (see example for\n{{#crossLink \"UserService/newUserGroupCreateStruct\"}}UserService.newUserGroupCreateStruct{{/crossLink}})",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "UserCreateStruct"
            },
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 112,
            "description": "Returns user update structure",
            "itemtype": "method",
            "name": "newUserUpdateStruct",
            "return": {
                "description": "",
                "type": "UserUpdateStruct"
            },
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 122,
            "description": "Returns role input structure",
            "itemtype": "method",
            "name": "newRoleInputStruct",
            "params": [
                {
                    "name": "identifier",
                    "description": "unique identifier for the new role (e.g. \"editor\")",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "RoleInputStruct"
            },
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 133,
            "description": "Returns target role assignment input structure",
            "itemtype": "method",
            "name": "newRoleAssignInputStruct",
            "params": [
                {
                    "name": "role",
                    "description": "object representing the target role (see example)",
                    "type": "Object"
                },
                {
                    "name": "limitation",
                    "description": "object representing limitations for assignment (see example)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "RoleAssignInputStruct"
            },
            "example": [
                "\n    var roleAssignCreateStruct = userService.newRoleAssignInputStruct(\n        {\n            \"_href\": \"/api/ezp/v2/user/roles/7\",\n            \"_media-type\": \"application/vnd.ez.api.RoleAssignInput+json\"\n        }, {\n            \"_identifier\": \"Section\",\n            \"values\": {\n                \"ref\": [{\n                    \"_href\": \"/api/ezp/v2/content/sections/1\",\n                    \"_media-type\": \"application/vnd.ez.api.Section+json\"\n                }, {\n                    \"_href\": \"/api/ezp/v2/content/sections/4\",\n                    \"_media-type\": \"application/vnd.ez.api.Section+json\"\n                }]\n            }\n        });\n"
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 163,
            "description": "Returns policy create structure",
            "itemtype": "method",
            "name": "newPolicyCreateStruct",
            "params": [
                {
                    "name": "module",
                    "description": "name of the module for which new policy should be active",
                    "type": "String"
                },
                {
                    "name": "theFunction",
                    "description": "name of the function for which the new policy should be active",
                    "type": "String"
                },
                {
                    "name": "limitations",
                    "description": "object describing limitations for new policy",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "PolicyCreateStruct"
            },
            "example": [
                "\n    var policyCreateStruct = userService.newPolicyCreateStruct(\n        \"content\", \"publish\", [{\n            limitation: [{\n                \"_identifier\": \"Section\",\n                \"values\": {\n                    \"ref\": [{\n                        \"_href\": \"5\"\n                    }, {\n                        \"_href\": \"4\"\n                    }]\n                }\n            }]\n        }]\n    );"
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 191,
            "description": "Policy update structure",
            "itemtype": "method",
            "name": "newPolicyUpdateStruct",
            "params": [
                {
                    "name": "limitations",
                    "description": "object describing limitations change for the policy (see \"newPolicyCreateStruct\" example)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "PolicyUpdateStruct"
            },
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 206,
            "description": "Load the root user group",
            "itemtype": "method",
            "name": "loadRootUserGroup",
            "params": [
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 234,
            "description": "Load the target user group",
            "itemtype": "method",
            "name": "loadUserGroup",
            "params": [
                {
                    "name": "userGroupId",
                    "description": "target user group identifier (e.g. \"/api/ezp/v2/user/groups/1/5\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 252,
            "description": "Load the target user group by remoteId",
            "itemtype": "method",
            "name": "loadUserGroupByRemoteId",
            "params": [
                {
                    "name": "userGroups",
                    "description": "link to root UserGroups resource (should be auto-discovered)",
                    "type": "String"
                },
                {
                    "name": "remoteId",
                    "description": "target user group remote identifier (e.g. \"f5c88a2209584891056f987fd965b0ba\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 271,
            "description": "Delete the target user group",
            "itemtype": "method",
            "name": "deleteUserGroup",
            "params": [
                {
                    "name": "userGroupId",
                    "description": "target user group identifier (e.g. \"/api/ezp/v2/user/groups/1/5\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 289,
            "description": "Move the target user group to the destination",
            "itemtype": "method",
            "name": "moveUserGroup",
            "params": [
                {
                    "name": "userGroupId",
                    "description": "target user group identifier (e.g. \"/api/ezp/v2/user/groups/1/5\")",
                    "type": "String"
                },
                {
                    "name": "destination",
                    "description": "destination identifier (e.g. \"/api/ezp/v2/user/groups/1/5/110\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 308,
            "description": "Create a new user group in the provided parent user group",
            "itemtype": "method",
            "name": "createUserGroup",
            "params": [
                {
                    "name": "parentGroupId",
                    "description": "target parent user group identifier (e.g. \"/api/ezp/v2/user/groups/1/5\")",
                    "type": "String"
                },
                {
                    "name": "userGroupCreateStruct",
                    "description": "object describing new user group to be created",
                    "type": "UserGroupCreateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 341,
            "description": "Update the target user group",
            "itemtype": "method",
            "name": "updateUserGroup",
            "params": [
                {
                    "name": "userGroupId",
                    "description": "target user group identifier (e.g. \"/api/ezp/v2/user/groups/1/5\")",
                    "type": "String"
                },
                {
                    "name": "userGroupUpdateStruct",
                    "description": "object describing changes to the target user group",
                    "type": "UserGroupUpdateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 360,
            "description": "Load subgroups of the target user group",
            "itemtype": "method",
            "name": "loadSubUserGroups",
            "params": [
                {
                    "name": "userGroupId",
                    "description": "target user group identifier (e.g. \"/api/ezp/v2/user/groups/1/5\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 392,
            "description": "Load users of the target user group",
            "itemtype": "method",
            "name": "loadUsersOfUserGroup",
            "params": [
                {
                    "name": "userGroupId",
                    "description": "target user group identifier (e.g. \"/api/ezp/v2/user/groups/1/5\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 424,
            "description": "Load user groups for the target user",
            "itemtype": "method",
            "name": "loadUserGroupsOfUser",
            "params": [
                {
                    "name": "userId",
                    "description": "target user identifier (e.g. \"/api/ezp/v2/user/users/14\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 446,
            "description": "Create a new user",
            "itemtype": "method",
            "name": "createUser",
            "params": [
                {
                    "name": "userGroupId",
                    "description": "target user group identifier (e.g. \"/api/ezp/v2/user/groups/1/5\")",
                    "type": "String"
                },
                {
                    "name": "userCreateStruct",
                    "description": "object describing new user to be created",
                    "type": "UserCreateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 479,
            "description": "Load users and usergroups for the target roleId",
            "itemtype": "method",
            "name": "getRoleAssignments",
            "params": [
                {
                    "name": "roleId",
                    "description": "target role identifier (e.g. \"/api/ezp/v2/user/roles/5\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 507,
            "description": "Load the target user",
            "itemtype": "method",
            "name": "loadUser",
            "params": [
                {
                    "name": "userId",
                    "description": "target user identifier (e.g. \"/api/ezp/v2/user/users/144\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 525,
            "description": "Checks if the given login is available.",
            "itemtype": "method",
            "name": "isLoginAvailable",
            "params": [
                {
                    "name": "login",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "props": [
                        {
                            "name": "available",
                            "description": "",
                            "type": "CAPIError|Boolean"
                        }
                    ]
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 557,
            "description": "Update the target user",
            "itemtype": "method",
            "name": "updateUser",
            "params": [
                {
                    "name": "userId",
                    "description": "target user identifier (e.g. \"/api/ezp/v2/user/users/144\")",
                    "type": "String"
                },
                {
                    "name": "userUpdateStruct",
                    "description": "object describing changes to the user",
                    "type": "UserUpdateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var userUpdateStruct = userService.newUserUpdateStruct();\n    userUpdateStruct.body.UserUpdate.email = \"somenewemail@nowhere.no\";\n    userService.updateUser(\n        \"/api/ezp/v2/user/users/144\",\n        userUpdateStruct,\n        callback\n    );"
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 584,
            "description": "Delete the target user",
            "itemtype": "method",
            "name": "deleteUser",
            "params": [
                {
                    "name": "userId",
                    "description": "target user identifier (e.g. \"/api/ezp/v2/user/users/144\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 606,
            "description": "Assign the target user to the target user group",
            "itemtype": "method",
            "name": "loadUser",
            "params": [
                {
                    "name": "userId",
                    "description": "target user identifier (e.g. \"/api/ezp/v2/user/users/144\")",
                    "type": "String"
                },
                {
                    "name": "userGroupId",
                    "description": "target user group identifier (e.g. \"/api/ezp/v2/user/groups/2\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 639,
            "description": "Remove target assignment (of a user to a user group)",
            "itemtype": "method",
            "name": "unassignUserFromUserGroup",
            "params": [
                {
                    "name": "userAssignedGroupId",
                    "description": "target assignment identifier (e.g. \"/api/ezp/v2/user/users/146/groups/1\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 661,
            "description": "Create a new role",
            "itemtype": "method",
            "name": "createRole",
            "params": [
                {
                    "name": "roleCreateStruct",
                    "description": "object describing new role to be created",
                    "type": "RoleCreateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 691,
            "description": "Load the target role",
            "itemtype": "method",
            "name": "loadRole",
            "params": [
                {
                    "name": "roleId",
                    "description": "target role identifier (e.g. \"/api/ezp/v2/user/roles/5\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 709,
            "description": "Search roles by string identifier and apply certain limit and offset on the result set",
            "itemtype": "method",
            "name": "loadRoles",
            "params": [
                {
                    "name": "identifier",
                    "description": "string identifier of the roles to search (e.g. \"admin\")",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "limit",
                    "description": "the limit of the result set",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "-1"
                },
                {
                    "name": "offset",
                    "description": "the offset of the result set",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    userService.loadRoles(\"admin\", 5, 5, callback);"
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 770,
            "description": "Update the target role",
            "itemtype": "method",
            "name": "updateRole",
            "params": [
                {
                    "name": "roleId",
                    "description": "target role identifier (e.g. \"/api/ezp/v2/user/roles/5\")",
                    "type": "String"
                },
                {
                    "name": "roleUpdateStruct",
                    "description": "object describing changes to the role",
                    "type": "RoleUpdateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 789,
            "description": "Delete the target role",
            "itemtype": "method",
            "name": "deleteRole",
            "params": [
                {
                    "name": "roleId",
                    "description": "target role identifier (e.g. \"/api/ezp/v2/user/roles/5\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 807,
            "description": "Get role assignments for the target user",
            "itemtype": "method",
            "name": "getRoleAssignmentsForUser",
            "params": [
                {
                    "name": "userId",
                    "description": "target user identifier (e.g. \"/api/ezp/v2/user/users/8\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 839,
            "description": "Get role assignments for the target user group",
            "itemtype": "method",
            "name": "getRoleAssignmentsForUserGroup",
            "params": [
                {
                    "name": "userGroupId",
                    "description": "target user group identifier (e.g. \"/api/ezp/v2/user/groups/2\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 871,
            "description": "Get RoleAssignment object for the target assignment (of a user to a role)",
            "itemtype": "method",
            "name": "getUserAssignmentObject",
            "params": [
                {
                    "name": "userAssignmentId",
                    "description": "target role assignment identifier (e.g. \"/api/ezp/v2/user/13/roles/7\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 889,
            "description": "Get RoleAssignment object for the target assignment (of a user group to a role)",
            "itemtype": "method",
            "name": "getUserGroupAssignmentObject",
            "params": [
                {
                    "name": "userGroupAssignmentId",
                    "description": "target role assignment identifier (e.g. \"/api/ezp/v2/user/groups/1/5/110/roles/7\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 907,
            "description": "Assign a role to user",
            "itemtype": "method",
            "name": "assignRoleToUser",
            "params": [
                {
                    "name": "userId",
                    "description": "target user identifier (e.g. \"/api/ezp/v2/user/users/8\")",
                    "type": "String"
                },
                {
                    "name": "roleAssignInputStruct",
                    "description": "object describing the new role assignment (see \"newRoleAssignInputStruct\")",
                    "type": "RoleAssignInputStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 941,
            "description": "Assign a role to user group",
            "itemtype": "method",
            "name": "assignRoleToUserGroup",
            "params": [
                {
                    "name": "userGroupId",
                    "description": "target user group identifier (e.g. \"/api/ezp/v2/user/groups/2\")",
                    "type": "String"
                },
                {
                    "name": "roleAssignInputStruct",
                    "description": "object describing the new role assignment (see \"newRoleAssignInputStruct\")",
                    "type": "RoleAssignInputStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 974,
            "description": "Remove target assignment (of a user to a role)",
            "itemtype": "method",
            "name": "unassignRoleFromUser",
            "params": [
                {
                    "name": "userRoleId",
                    "description": "target role assignment identifier (e.g. \"/api/ezp/v2/user/users/110/roles/7\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 992,
            "description": "Remove target assignment (of a user group to a role)",
            "itemtype": "method",
            "name": "unassignRoleFromUserGroup",
            "params": [
                {
                    "name": "userGroupRoleId",
                    "description": "target role assignment identifier (e.g. \"/api/ezp/v2/user/groups/2/roles/7\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 1014,
            "description": "Add the new policy to the target role",
            "itemtype": "method",
            "name": "addPolicy",
            "params": [
                {
                    "name": "roleId",
                    "description": "target role identifier (e.g. \"/api/ezp/v2/user/roles/7\")",
                    "type": "String"
                },
                {
                    "name": "policyCreateStruct",
                    "description": "object describing new policy to be created",
                    "type": "PolicyCreateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    var policyCreateStruct = userService.newPolicyCreateStruct(\n    \"content\",\n    \"create\",\n    [{  _identifier: \"Class\",\n        values: {\n            ref: [{\n                _href: \"18\"\n            }]\n        }\n    }]);\n\n    userService.addPolicy(\n    \"/api/ezp/v2/user/roles/7\",\n    policyCreateStruct,\n    callback);"
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 1063,
            "description": "Load policies of the target role",
            "itemtype": "method",
            "name": "loadPolicies",
            "params": [
                {
                    "name": "roleId",
                    "description": "target role identifier (e.g. \"/api/ezp/v2/user/roles/7\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 1095,
            "description": "Load the target policy",
            "itemtype": "method",
            "name": "loadPolicy",
            "params": [
                {
                    "name": "policyId",
                    "description": "target policy identifier (e.g. \"/api/ezp/v2/user/roles/7/policies/1\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 1113,
            "description": "Update the target policy",
            "itemtype": "method",
            "name": "updatePolicy",
            "params": [
                {
                    "name": "policyId",
                    "description": "target policy identifier (e.g. \"/api/ezp/v2/user/roles/7/policies/1\")",
                    "type": "String"
                },
                {
                    "name": "policyUpdateStruct",
                    "description": "object describing changes to the policy",
                    "type": "PolicyUpdateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 1132,
            "description": "Delete the target policy",
            "itemtype": "method",
            "name": "deletePolicy",
            "params": [
                {
                    "name": "policyId",
                    "description": "target policy identifier (e.g. \"/api/ezp/v2/user/roles/7/policies/1\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 1150,
            "description": "Load policies for the target user",
            "itemtype": "method",
            "name": "loadPoliciesByUserId",
            "params": [
                {
                    "name": "userPolicies",
                    "description": "link to root UserPolicies resource (should be auto-discovered)",
                    "type": "String"
                },
                {
                    "name": "userId",
                    "description": "target user numerical identifier (e.g. 110)",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 1173,
            "description": "Creates a session. This method **only** creates a session, for a complete\nand correct authentication from CAPI point of view, you need to use\n{{#crossLink \"CAPI/logIn:method\"}}the `logIn` method of the CAPI\nobject{{/crossLink}}",
            "itemtype": "method",
            "name": "createSession",
            "params": [
                {
                    "name": "sessionCreateStruct",
                    "description": "object describing new session to be created (see \"newSessionCreateStruct\")",
                    "type": "SessionCreateStruct"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 1208,
            "description": "Calls the refresh session resource to check whether the current session\nis valid. For a complete and correct *is logged in* check, you need to\nuse {{#crossLink \"CAPI/isLoggedIn:method\"}}CAPI.isLoggedIn{{/crossLink}}",
            "itemtype": "method",
            "name": "refreshSession",
            "params": [
                {
                    "name": "sessionId",
                    "description": "the session identifier (e.g. \"o7i8r1sapfc9r84ae53bgq8gp4\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/services/UserService.js",
            "line": 1238,
            "description": "Delete the target session. For a complete and correct de-authentifcation,\nyou need to use {{#crossLink \"CAPI/logOut:method\"}}the `logOut` method of\nthe CAPI object{{/crossLink}}",
            "itemtype": "method",
            "name": "deleteSession",
            "params": [
                {
                    "name": "sessionId",
                    "description": "target session identifier (e.g. \"/api/ezp/v2/user/sessions/o7i8r1sapfc9r84ae53bgq8gp4\")",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback executed after performing the request (see\n {{#crossLink \"UserService\"}}Note on the callbacks usage{{/crossLink}} for more info)",
                    "type": "Function"
                }
            ],
            "class": "UserService"
        },
        {
            "file": "src/storages/InMemoryStorage.js",
            "line": 15,
            "description": "Storage object, which is used internally to store all the given data",
            "itemtype": "property",
            "name": "_storage",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "InMemoryStorage"
        },
        {
            "file": "src/storages/InMemoryStorage.js",
            "line": 25,
            "description": "Retrieve an item from the storage",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "InMemoryStorage"
        },
        {
            "file": "src/storages/InMemoryStorage.js",
            "line": 41,
            "description": "Store an item in storage",
            "itemtype": "method",
            "name": "setItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "InMemoryStorage"
        },
        {
            "file": "src/storages/InMemoryStorage.js",
            "line": 53,
            "description": "Remove an item from storage",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "InMemoryStorage"
        },
        {
            "file": "src/storages/InMemoryStorage.js",
            "line": 65,
            "description": "Check whether this storage implementation is compatible with the current environment.\n\nThe InMemoryStorage is always compatible with any environment.",
            "itemtype": "method",
            "name": "isComaptible",
            "static": 1,
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "InMemoryStorage"
        },
        {
            "file": "src/storages/LocalStorage.js",
            "line": 22,
            "description": "Session storage which is internally used to store and retrieve data",
            "itemtype": "property",
            "name": "_storage",
            "type": "{Storage}",
            "access": "private",
            "tagname": "",
            "class": "LocalStorage"
        },
        {
            "file": "src/storages/LocalStorage.js",
            "line": 32,
            "description": "Retrieve an item from the storage",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "LocalStorage"
        },
        {
            "file": "src/storages/LocalStorage.js",
            "line": 43,
            "description": "Store an item in storage",
            "itemtype": "method",
            "name": "setItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "LocalStorage"
        },
        {
            "file": "src/storages/LocalStorage.js",
            "line": 54,
            "description": "Remove an item from storage",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "LocalStorage"
        },
        {
            "file": "src/storages/LocalStorage.js",
            "line": 64,
            "description": "Check whether this storage implementation is compatible with the current environment.",
            "itemtype": "method",
            "name": "isComaptible",
            "static": 1,
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "LocalStorage"
        },
        {
            "file": "src/structures/ContentCreateStruct.js",
            "line": 43,
            "description": "Adds a new field and its value into the structure",
            "itemtype": "method",
            "name": "addField",
            "params": [
                {
                    "name": "id",
                    "description": "field id",
                    "type": "Number"
                },
                {
                    "name": "fieldIdentifer",
                    "description": "field identifier",
                    "type": "String"
                },
                {
                    "name": "fieldValue",
                    "description": "field value",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "ContentCreateStruct"
            },
            "class": "ContentCreateStruct"
        },
        {
            "file": "src/structures/ContentMetadataUpdateStruct.js",
            "line": 21,
            "description": "Sets the section id",
            "itemtype": "method",
            "name": "setSection",
            "params": [
                {
                    "name": "sectionId",
                    "description": "the Section REST id",
                    "type": "String"
                }
            ],
            "class": "ContentMetadataUpdateStruct"
        },
        {
            "file": "src/structures/ContentMetadataUpdateStruct.js",
            "line": 31,
            "description": "Sets the main location id",
            "itemtype": "method",
            "name": "setMainLocation",
            "params": [
                {
                    "name": "locationId",
                    "description": "the Location REST id",
                    "type": "String"
                }
            ],
            "class": "ContentMetadataUpdateStruct"
        },
        {
            "file": "src/structures/Response.js",
            "line": 11,
            "description": "The XMLHttpRequest object",
            "itemtype": "property",
            "name": "xhr",
            "type": "{XMLHttpRequest}",
            "default": "null",
            "class": "Response"
        },
        {
            "file": "src/structures/Response.js",
            "line": 20,
            "description": "Body of the response (most times JSON string recieved from REST service via a Connection object)",
            "itemtype": "property",
            "name": "body",
            "type": "{String}",
            "default": "\"\"",
            "class": "Response"
        },
        {
            "file": "src/structures/Response.js",
            "line": 29,
            "description": "Document represents \"body\" property of the response parsed into structured object",
            "itemtype": "property",
            "name": "document",
            "type": "{Object}",
            "default": "null",
            "class": "Response"
        },
        {
            "file": "src/structures/ViewCreateStruct.js",
            "line": 25,
            "description": "Holds the view type",
            "itemtype": "property",
            "name": "_type",
            "access": "protected",
            "tagname": "",
            "type": "{String}",
            "class": "ViewCreateStruct"
        },
        {
            "file": "src/structures/ViewCreateStruct.js",
            "line": 33,
            "description": "Holds the body of the view create structs",
            "itemtype": "property",
            "name": "body",
            "type": "{Object}",
            "default": "{\n    ViewInput: {\n        identifier: <identifier>,\n        public: false,\n        <type>: {\n            Criteria: {},\n            SortClauses: {},\n            FacetBuilders: {},\n        },\n    }\n}",
            "class": "ViewCreateStruct"
        },
        {
            "file": "src/structures/ViewCreateStruct.js",
            "line": 53,
            "description": "Holds the headers sent when creating a view",
            "itemtype": "property",
            "name": "headers",
            "type": "{Object}",
            "default": "{\n \"Accept\": \"application/vnd.ez.api.View+json; version=1.1\",\n \"Content-Type\": \"application/vnd.ez.api.ViewInput+json; version=1.1\"\n}",
            "class": "ViewCreateStruct"
        },
        {
            "file": "src/structures/ViewCreateStruct.js",
            "line": 69,
            "description": "Gets the Criteria property",
            "itemtype": "method",
            "name": "getCriteria",
            "return": {
                "description": "the criteria property.",
                "type": "Object"
            },
            "deprecated": true,
            "class": "ViewCreateStruct"
        },
        {
            "file": "src/structures/ViewCreateStruct.js",
            "line": 80,
            "description": "Gets the Query property",
            "itemtype": "method",
            "name": "getQuery",
            "return": {
                "description": "the query property.",
                "type": "Object"
            },
            "class": "ViewCreateStruct"
        },
        {
            "file": "src/structures/ViewCreateStruct.js",
            "line": 90,
            "description": "Gets the Filter property",
            "itemtype": "method",
            "name": "getFilter",
            "return": {
                "description": "the Filter property.",
                "type": "Object"
            },
            "class": "ViewCreateStruct"
        },
        {
            "file": "src/structures/ViewCreateStruct.js",
            "line": 100,
            "description": "Sets the Criteria property",
            "itemtype": "method",
            "name": "setCriteria",
            "deprecated": true,
            "class": "ViewCreateStruct"
        },
        {
            "file": "src/structures/ViewCreateStruct.js",
            "line": 110,
            "description": "Sets the Query property",
            "itemtype": "method",
            "name": "setQuery",
            "class": "ViewCreateStruct"
        },
        {
            "file": "src/structures/ViewCreateStruct.js",
            "line": 119,
            "description": "Sets the Filter property",
            "itemtype": "method",
            "name": "setFilter",
            "class": "ViewCreateStruct"
        },
        {
            "file": "src/structures/ViewCreateStruct.js",
            "line": 128,
            "description": "Sets the SortClauses property",
            "itemtype": "method",
            "name": "setSortClauses",
            "class": "ViewCreateStruct"
        },
        {
            "file": "src/structures/ViewCreateStruct.js",
            "line": 137,
            "description": "Sets the FacetBuilders property",
            "itemtype": "method",
            "name": "setFacetBuilders",
            "class": "ViewCreateStruct"
        },
        {
            "file": "src/structures/ViewCreateStruct.js",
            "line": 146,
            "description": "Sets the limit and offset properties",
            "itemtype": "method",
            "name": "setLimitAndOffset",
            "class": "ViewCreateStruct"
        },
        {
            "file": "src/utils/extend.js",
            "line": 11,
            "description": "Extend the given object with properties of an arbitrary amount of other objects\n\nOverride priority is determined using the order the objects are given in\nEach further object has a higher priority then the one before it.\n\nOnly actual properties of the given objects will be used not the ones bubbling up\nthrough the prototype chain.",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
                {
                    "name": "target",
                    "description": ""
                },
                {
                    "name": "obj",
                    "description": "Arbitrary amount of objects which will extend the first one",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "the extended object",
                "type": "Object"
            },
            "class": "extend"
        },
        {
            "file": "src/utils/uriparse.js",
            "line": 11,
            "description": "Parses an URI Template according to the RFC 6570.",
            "itemtype": "method",
            "name": "parse",
            "static": 1,
            "params": [
                {
                    "name": "template",
                    "description": "the template to interpret",
                    "type": "String"
                },
                {
                    "name": "the",
                    "description": "parameters",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "parseUriTemplate"
        },
        {
            "file": "src/CAPI.js",
            "line": 70,
            "description": "Checks that the CAPI instance is logged in",
            "itemtype": "method",
            "name": "isLoggedIn",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CAPI"
        },
        {
            "file": "src/CAPI.js",
            "line": 80,
            "description": "Logs in the user",
            "itemtype": "method",
            "name": "logIn",
            "params": [
                {
                    "name": "credentials",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "login",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "password",
                            "description": "",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CAPI"
        },
        {
            "file": "src/CAPI.js",
            "line": 98,
            "description": "Logs out the current user.",
            "itemtype": "method",
            "name": "logOut",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "CAPI"
        },
        {
            "file": "src/CAPI.js",
            "line": 108,
            "description": "Get instance of Content Service. Use ContentService to retrieve information and execute operations related to Content.",
            "itemtype": "method",
            "name": "getContentService",
            "return": {
                "description": "",
                "type": "ContentService"
            },
            "example": [
                "\n     var contentService = jsCAPI.getContentService();\n     contentService.loadRoot(\n         callback\n     );"
            ],
            "class": "CAPI"
        },
        {
            "file": "src/CAPI.js",
            "line": 130,
            "description": "Get instance of Content Type Service. Use ContentTypeService to retrieve information and execute operations related to ContentTypes.",
            "itemtype": "method",
            "name": "getContentTypeService",
            "return": {
                "description": "",
                "type": "ContentTypeService"
            },
            "example": [
                "\n     var contentTypeService = jsCAPI.getContentTypeService();\n     contentTypeService.loadContentType(\n         '/api/ezp/v2/content/types/18',\n         callback\n     );"
            ],
            "class": "CAPI"
        },
        {
            "file": "src/CAPI.js",
            "line": 152,
            "description": "Get instance of User Service. Use UserService to retrieve information and execute operations related to Users.",
            "itemtype": "method",
            "name": "getUserService",
            "return": {
                "description": "",
                "type": "UserService"
            },
            "example": [
                "\n     var userService = jsCAPI.getUserService();\n     userService.loadRootUserGroup(\n         callback\n     );"
            ],
            "class": "CAPI"
        },
        {
            "file": "src/CAPI.js",
            "line": 174,
            "description": "Get instance of Discovery Service. Use DiscoveryService to internally to discover\nresources URI and media type provided in the root resource.",
            "itemtype": "method",
            "name": "getDiscoveryService",
            "return": {
                "description": "",
                "type": "DiscoveryService"
            },
            "example": [
                "\n     var discoveryService = jsCAPI.getDiscoveryService();\n     discoveryService.getInfoObject(\n         \"Trash\",\n         callback\n     );"
            ],
            "class": "CAPI"
        },
        {
            "file": "src/CAPI.js",
            "line": 191,
            "description": "Gets the connection manager",
            "itemtype": "method",
            "name": "getConnectionManager",
            "return": {
                "description": "",
                "type": "ConnectionManager"
            },
            "example": [
                "\n     var connectionManager = jsCAPI.getConnectionManager();\n     connectionManager.request(\n         \"GET\",\n         \"/endpoint\",\n         \"\",\n         {\"Accept\": \"application/json\"},\n         callback\n     );"
            ],
            "class": "CAPI"
        },
        {
            "file": "src/ConnectionFeatureFactory.js",
            "line": 20,
            "description": "Returns instance of the very first compatible connection from the list",
            "itemtype": "method",
            "name": "createConnection",
            "return": {
                "description": "",
                "type": "Connection"
            },
            "class": "ConnectionFeatureFactory"
        },
        {
            "file": "src/ConnectionManager.js",
            "line": 28,
            "description": "Basic request function",
            "itemtype": "method",
            "name": "request",
            "params": [
                {
                    "name": "method",
                    "description": "request method (\"POST\", \"GET\" etc)",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"GET\""
                },
                {
                    "name": "url",
                    "description": "requested REST resource",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"/\""
                },
                {
                    "name": "body",
                    "description": "a string which should be passed in request body to the REST service",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"\""
                },
                {
                    "name": "headers",
                    "description": "{object} object literal describing request headers",
                    "optional": true
                },
                {
                    "name": "requestEventHandlers",
                    "description": "a set of callbacks to apply on a specific XHR event like onload, onerror, onprogress, etc.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function, which will be executed on request success",
                    "type": "Function"
                }
            ],
            "example": [
                "\n     var connectionManager = jsCAPI.getConnectionManager();\n\n     connectionManager.request(\n         'GET',\n         '/endpoint',\n         '',\n         {Accept: 'application/json'},\n         {\n             upload: {\n                 onloadstart: someUploadCallback,\n                 onload: someUploadCallback,\n                 onloadend: someUploadCallback,\n                 onprogress: someUploadCallback,\n                 onabort: someUploadCallback,\n                 onerror: someUploadCallback,\n                 ontimeout: someUploadCallback,\n             },\n             onloadstart: someCallback,\n             onload: someCallback,\n             onloadend: someCallback,\n             onprogress: someCallback,\n             onabort: someCallback,\n             onerror: someCallback,\n             ontimeout: someCallback,\n         },\n         callback\n     );"
            ],
            "class": "ConnectionManager"
        },
        {
            "file": "src/ConnectionManager.js",
            "line": 177,
            "description": "Not authorized request function\nUsed mainly for initial requests (e.g. createSession)",
            "itemtype": "method",
            "name": "notAuthorizedRequest",
            "params": [
                {
                    "name": "method",
                    "description": "request method (\"POST\", \"GET\" etc)",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"GET\""
                },
                {
                    "name": "url",
                    "description": "requested REST resource",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"/\""
                },
                {
                    "name": "body",
                    "description": "a string which should be passed in request body to the REST service",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"\""
                },
                {
                    "name": "headers",
                    "description": "{object} object literal describing request headers",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function, which will be executed on request success",
                    "type": "Function"
                }
            ],
            "class": "ConnectionManager"
        },
        {
            "file": "src/PromiseCAPI.js",
            "line": 20,
            "description": "Dynamically generated method which returns promise-based version of the ContentService.\nResulting service provides set of methods named the same as the regular\n{{#crossLink \"ContentService\"}}ContentService{{/crossLink}} methods.\nThe only exception are structure constructors (new...Struct methods) which are not implemented in promise-based services.\nThese promise-based methods should be used without the callback parameter and according to promises approach.\nBasic usage of a promise-based method is provided in the following example.\nRead more about promises at https://github.com/kriskowal/q",
            "itemtype": "method",
            "name": "getContentService",
            "return": {
                "description": "",
                "type": "PromiseService"
            },
            "example": [
                "\n    var jsCAPI = new eZ.CAPI(\n        'http://ez.git.local',\n        new eZ.SessionAuthAgent({login: \"admin\", password: \"ezpublish\"}),\n        {logRequests: true},\n    ),\n    jsPromiseCAPI = new eZ.PromiseCAPI(jsCAPI),\n    promiseContentService = jsPromiseCAPI.getContentService(),\n    promise = promiseContentService.loadSection(\"/api/ezp/v2/content/sections/1\");\n\n    promise.then(\n        function (result) {\n            console.log(result);\n        }, function (error) {\n            console.log(error);\n        }\n    );"
            ],
            "class": "PromiseCAPI"
        },
        {
            "file": "src/PromiseCAPI.js",
            "line": 50,
            "description": "Dynamically generated method which returns promise-based version of the ContentTypeService.\nResulting service provides set of methods named the same as the regular\n{{#crossLink \"ContentTypeService\"}}ContentTypeService{{/crossLink}} methods.\nThe only exception are structure constructors (new...Struct methods) which are not implemented in promise-based services.\nThese promise-based methods should be used without the callback parameter and according to promises approach.\nBasic usage of a promise-based method is provided in the following example.\nRead more about promises at https://github.com/kriskowal/q",
            "itemtype": "method",
            "name": "getContentTypeService",
            "return": {
                "description": "",
                "type": "PromiseService"
            },
            "example": [
                "\n    var jsCAPI = new eZ.CAPI(\n        'http://ez.git.local',\n        new eZ.SessionAuthAgent({login: \"admin\", password: \"ezpublish\"}),\n        {logRequests: true},\n    ),\n    jsPromiseCAPI = new eZ.PromiseCAPI(jsCAPI),\n    promiseContentTypeService = jsPromiseCAPI.getContentTypeService(),\n    promise = promiseContentTypeService.loadContentTypeGroup(\"/api/ezp/v2/content/typegroups/1\");\n\n    promise.then(\n        function (result) {\n            console.log(result);\n        }, function (error) {\n            console.log(error);\n        }\n    );"
            ],
            "class": "PromiseCAPI"
        },
        {
            "file": "src/PromiseCAPI.js",
            "line": 80,
            "description": "Dynamically generated method which returns promise-based version of the UserService.\nResulting service provides set of methods named the same as the regular\n{{#crossLink \"UserService\"}}UserService{{/crossLink}} methods.\nThe only exception are structure constructors (new...Struct methods) which are not implemented in promise-based services.\nThese promise-based methods should be used without the callback parameter and according to promises approach.\nBasic usage of a promise-based method is provided in the following example.\nRead more about promises at https://github.com/kriskowal/q",
            "itemtype": "method",
            "name": "getUserService",
            "return": {
                "description": "",
                "type": "PromiseService"
            },
            "example": [
                "\n    var jsCAPI = new eZ.CAPI(\n        'http://ez.git.local',\n        new eZ.SessionAuthAgent({login: \"admin\", password: \"ezpublish\"}),\n        {logRequests: true},\n    ),\n    jsPromiseCAPI = new eZ.PromiseCAPI(jsCAPI),\n    promiseUserService = jsPromiseCAPI.getUserService(),\n    promise = promiseUserService.loadUserGroup(\"/api/ezp/v2/user/groups/1/5\");\n\n    promise.then(\n        function (result) {\n            console.log(result);\n        }, function (error) {\n            console.log(error);\n        }\n    );"
            ],
            "class": "PromiseCAPI"
        },
        {
            "file": "src/PromiseCAPI.js",
            "line": 110,
            "description": "Array of promise-based services instances (needed to implement singletons approach)",
            "itemtype": "attribute",
            "name": "_services",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "class": "PromiseCAPI"
        },
        {
            "file": "src/PromiseCAPI.js",
            "line": 119,
            "description": "Convert any CAPI service factory into Promise-based service factory.\n\nThe factory will cache once created instances inside the _services object\nto not create new service wrappers each time they are requested",
            "itemtype": "method",
            "name": "_createPromiseServiceFactory",
            "params": [
                {
                    "name": "serviceFactoryName",
                    "description": "name of the function which returns one of the CAPI services",
                    "type": "String"
                }
            ],
            "return": {
                "description": "function which returns instance of the PromiseService - promise-based wrapper around any of the CAPI services",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "PromiseCAPI"
        }
    ],
    "warnings": []
}